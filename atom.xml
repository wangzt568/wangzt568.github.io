<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZetianNotes</title>
  
  
  <link href="http://wangzt568.github.io/atom.xml" rel="self"/>
  
  <link href="http://wangzt568.github.io/"/>
  <updated>2021-02-16T15:07:51.989Z</updated>
  <id>http://wangzt568.github.io/</id>
  
  <author>
    <name>Wang,Zetian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1286.Iterator for Combination</title>
    <link href="http://wangzt568.github.io/2021/02/16/1286-Iterator-for-Combination/"/>
    <id>http://wangzt568.github.io/2021/02/16/1286-Iterator-for-Combination/</id>
    <published>2021-02-16T15:04:58.000Z</published>
    <updated>2021-02-16T15:07:51.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1286-Iterator-for-Combination"><a href="#1286-Iterator-for-Combination" class="headerlink" title="1286. Iterator for Combination"></a>1286. Iterator for Combination</h1><p>Design the <code>CombinationIterator</code> class:</p><ul><li>  <code>CombinationIterator(string characters, int combinationLength)</code> Initializes the object with a string <code>characters</code> of <strong>sorted distinct</strong> lowercase English letters and a number <code>combinationLength</code> as arguments.</li><li>  <code>next()</code> Returns the next combination of length <code>combinationLength</code> in <strong>lexicographical order</strong>.</li><li>  <code>hasNext()</code> Returns <code>true</code> if and only if there exists a next combination.</li></ul><p><strong>Example 1:</strong></p><p><strong>Input</strong><br>[“CombinationIterator”, “next”, “hasNext”, “next”, “hasNext”, “next”, “hasNext”]<br>[[“abc”, 2], [], [], [], [], [], []]<br><strong>Output</strong><br>[null, “ab”, true, “ac”, true, “bc”, false]</p><p><strong>Explanation</strong><br>CombinationIterator itr = new CombinationIterator(“abc”, 2);<br>itr.next();    // return “ab”<br>itr.hasNext(); // return True<br>itr.next();    // return “ac”<br>itr.hasNext(); // return True<br>itr.next();    // return “bc”<br>itr.hasNext(); // return False</p><p><strong>Constraints:</strong></p><ul><li>  <code>1 &lt;= combinationLength &lt;= characters.length &lt;= 15</code></li><li>  All the characters of <code>characters</code> are <strong>unique</strong>.</li><li>  At most <code>104</code> calls will be made to <code>next</code> and <code>hasNext</code>.</li><li>  It’s guaranteed that all calls of the function <code>next</code> are valid.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CombinationIterator</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> st<span class="token punctuation">;</span>    <span class="token class-name">String</span> result<span class="token punctuation">,</span> str<span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">int</span> comLength<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token class-name">CombinationIterator</span><span class="token punctuation">(</span><span class="token class-name">String</span> characters<span class="token punctuation">,</span> <span class="token keyword">int</span> combinationLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> characters<span class="token punctuation">;</span>        comLength <span class="token operator">=</span> combinationLength<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//create first permutation.</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> c <span class="token operator">:</span> characters<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">+=</span> c<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> combinationLength<span class="token punctuation">)</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">//extract all the index of the character in characters.</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> c <span class="token operator">:</span> characters<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//calculate next</span>        <span class="token class-name">String</span> currResult <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token comment">//因为是符合lexicographical order,所以每次更新permutation,组合中从末尾开始与原String从末尾开始</span><span class="token comment">//相一致的元素,必然要发生改变. 比如: ac abc.那么c必然要变化. acd, abcd, 那么cd必然要发生变化,不然无法符</span><span class="token comment">//合lexicographical order.</span><span class="token comment">//从末尾开始,移除当前组合和原str位置对应的元素.</span><span class="token comment">//比如当前组合是ac, 原str是abc, 那么就移除c.</span><span class="token comment">//当前组合变为a, 原str的index减少一,对应元素为b,</span><span class="token comment">//此时组合中末尾元素为a, 无法与str中的b对应,跳出循环</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//对应的,结果中也要移除相应的元素.</span>            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果所有元素都被移除,说明当前组合已经是lexicographical order下的最后一个.</span><span class="token comment">//比如 abcd,要求长度是3, 那么bcd为最后一种组合. 运行到此, bcd可以被上面的循环完全移除.所以st为空可以判断</span><span class="token comment">//没有next</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> currResult<span class="token punctuation">;</span>                index <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//末尾元素移除完毕后, 当前元素也必然要改变, 形成新的组合.</span><span class="token comment">//移除当前元素, 并按顺序加入当前元素的后置位元素,直到组合长度符合要求.</span>        result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> comLength<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Character</span> temp <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> currResult<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Your CombinationIterator object will be instantiated and called as such: * CombinationIterator obj = new CombinationIterator(characters, combinationLength); * String param_1 = obj.next(); * boolean param_2 = obj.hasNext(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="时间与空间复杂度:"></a>时间与空间复杂度:</h3><p>O(n)space<br>O(n)init<br>O(n)next<br>O(n)hasNext</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1286-Iterator-for-Combination&quot;&gt;&lt;a href=&quot;#1286-Iterator-for-Combination&quot; class=&quot;headerlink&quot; title=&quot;1286. Iterator for Combination&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://wangzt568.github.io/2021/02/14/test/"/>
    <id>http://wangzt568.github.io/2021/02/14/test/</id>
    <published>2021-02-15T04:08:54.000Z</published>
    <updated>2021-02-15T04:09:19.216Z</updated>
    
    
    
    
    <category term="test" scheme="http://wangzt568.github.io/categories/test/"/>
    
    
    <category term="test" scheme="http://wangzt568.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Multi-threading-Concepts</title>
    <link href="http://wangzt568.github.io/2021/02/14/Multi-threading-Concepts/"/>
    <id>http://wangzt568.github.io/2021/02/14/Multi-threading-Concepts/</id>
    <published>2021-02-15T02:04:15.000Z</published>
    <updated>2021-02-15T03:57:47.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Semaphores"><a href="#Semaphores" class="headerlink" title="Semaphores"></a>Semaphores</h1><ul><li>Invented by Dijkstra back in 1962</li><li>semaphores are simple variables(or abstract data types) that are used for controlling access to a common resource.</li></ul><p><strong><em>It is a record of how many units of particular resource are available, we have to wait until a unit of the resource becomes available again.</em></strong></p><hr><ul><li>Counting semaphores:  allows an arbitrary resource count</li></ul><hr><ul><li>Binary semaphores:  semaphores that are restricted to the values 0 and 1</li></ul><hr><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h3><pre><code>1. semaphores tracks only how many resources are free - it does not keep track of which of the resources are free.2. the semaphore count may serve as a useful trigger for a number of different actions(web servers)3. producer-consumer problem can be solved and implemented with the help of semaphores.</code></pre><h3 id="Mutexes-Mutual-Exclusion-Objects"><a href="#Mutexes-Mutual-Exclusion-Objects" class="headerlink" title="Mutexes(Mutual Exclusion Objects)"></a>Mutexes(Mutual Exclusion Objects)</h3><ul><li>To prevent race conditions</li><li>mutex is very similar to a binary semaphore, while binary semaphore can be used as mutex, a mutex is a more specific use-case.</li><li>a Lock is designed to enforce a mutual exclusion concurrency control policy.</li></ul><h3 id="Differences-between-mutex-and-semaphore"><a href="#Differences-between-mutex-and-semaphore" class="headerlink" title="Differences between mutex and semaphore"></a>Differences between mutex and semaphore</h3><p><strong>SEMAPHORE</strong></p><ul><li>signalling mechanism, threads and process perform wait() and notify() operations to indicate whether they are acquiring or releasing the resource.</li><li>allows multiple program threads to access the finite instance of resources(not just a single resource)</li><li>the process or thread blocks itself if no resource if free till the count of semaphore become greater than 0.</li></ul><p><strong>MUTEX</strong></p><ul><li>locking mechanism, threads or processes have to acquire the lock on mutex object if it wants to acquire the resource.</li><li>mutex allows multiple program threads to access a single shared resource but one at a time.</li><li>if the lock is already acquired by another thread or process then the thread will wait until the mutex object gets unlocked.</li></ul><h2 id="SemaphoreExample"><a href="#SemaphoreExample" class="headerlink" title="SemaphoreExample"></a>SemaphoreExample</h2><blockquote><p>Only 3 threads can access the resource at one time cause there is only 3 permits in Semaphore.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Semaphore</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">DownLoader</span><span class="token punctuation">&#123;</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">downLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">downLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DownLoading data........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Multithreading</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">DownLoader</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">downLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Semaphores&quot;&gt;&lt;a href=&quot;#Semaphores&quot; class=&quot;headerlink&quot; title=&quot;Semaphores&quot;&gt;&lt;/a&gt;Semaphores&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Invented by Dijkstra back in 196</summary>
      
    
    
    
    <category term="Multi-threading" scheme="http://wangzt568.github.io/categories/Multi-threading/"/>
    
    
    <category term="Java" scheme="http://wangzt568.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Enums</title>
    <link href="http://wangzt568.github.io/2021/02/14/Enums-1/"/>
    <id>http://wangzt568.github.io/2021/02/14/Enums-1/</id>
    <published>2021-02-15T01:47:55.000Z</published>
    <updated>2021-02-15T03:57:03.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Enums"><a href="#Enums" class="headerlink" title="Enums"></a>Enums</h1><h2 id="Enums-概念"><a href="#Enums-概念" class="headerlink" title="Enums 概念"></a>Enums 概念</h2><blockquote><p>An enum type is a special data type that enables for a variable to be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it. Common examples include compass directions (values of NORTH, SOUTH, EAST, and WEST) and the days of the week.</p></blockquote><p>Because they are constants, the names of an enum type’s fields are in uppercase letters.<br>In the Java programming language, you define an enum type by using the enum keyword. For example, you would specify a days-of-the-week enum type as:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>SUNDAY<span class="token punctuation">,</span> MONDAY<span class="token punctuation">,</span> TUESDAY<span class="token punctuation">,</span> WEDNESDAY<span class="token punctuation">,</span>THURSDAY<span class="token punctuation">,</span> FRIDAY<span class="token punctuation">,</span> SATURDAY<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You should use enum types any time you need to represent a fixed set of constants. That includes natural enum types such as the planets in our solar system and data sets where you know all possible values at compile time—for example, the choices on a menu, command line flags, and so on.</p><p>Here is some code that shows you how to use the Day enum defined above:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Day</span> day<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span> day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> MONDAY<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mondays are bad."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FRIDAY<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fridays are better."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SATURDAY<span class="token operator">:</span> <span class="token keyword">case</span> SUNDAY<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Weekends are best."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Midweek days are so-so."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EnumTest</span> firstDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>MONDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        firstDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> thirdDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>WEDNESDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        thirdDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> fifthDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        fifthDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> sixthDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        sixthDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> seventhDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        seventhDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//The output is:</span>  <span class="token class-name">Mondays</span> are <span class="token class-name"><span class="token namespace">bad<span class="token punctuation">.</span></span>Midweek</span> days are so<span class="token operator">-</span><span class="token class-name"><span class="token namespace">so<span class="token punctuation">.</span></span>Fridays</span> are <span class="token class-name"><span class="token namespace">better<span class="token punctuation">.</span></span>Weekends</span> are <span class="token class-name"><span class="token namespace">best<span class="token punctuation">.</span></span>Weekends</span> are best<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java programming language enum types are much more powerful than their counterparts in other languages. The enum declaration defines a class (called an enum type). The enum class body can include methods and other fields. The compiler automatically adds some special methods when it creates an enum. For example, they have <strong>a static values method</strong> that returns an array containing all of the values of the enum in the order they are declared. This method is commonly used in combination with the for-each construct to iterate over the values of an enum type. For example, this code from the Planet class example below iterates over all the planets in the solar system.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Planet</span> p <span class="token operator">:</span> <span class="token class-name">Planet</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your weight on %s is %f%n"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">surfaceWeight</span><span class="token punctuation">(</span>mass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Note:</strong> <em>All</em> enums implicitly extend java.lang.Enum. Because a class can only extend one parent (see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html">Declaring Classes</a>), the Java language does not support multiple inheritance of state (see <a href="https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html">Multiple Inheritance of State, Implementation, and Type</a>), and therefore an enum cannot extend anything else.</p><p>In the following example, Planet is an enum type that represents the planets in the solar system. They are defined with constant mass and radius properties.</p><p>Each enum constant is declared with values for the mass and radius parameters. These values are passed to the constructor when the constant is created. Java requires that the constants be defined first, prior to any fields or methods. Also, when there are fields and methods, the list of enum constants must end with a semicolon.</p><hr><p>Note: The constructor for an enum type must be package-private or private access. It automatically creates the constants that are defined at the beginning of the enum body. You cannot invoke an enum constructor yourself.</p><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Planet</span> <span class="token punctuation">&#123;</span>     MERCURY <span class="token punctuation">(</span><span class="token number">3.303e+23</span><span class="token punctuation">,</span> <span class="token number">2.4397e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     VENUS   <span class="token punctuation">(</span><span class="token number">4.869e+24</span><span class="token punctuation">,</span> <span class="token number">6.0518e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     EARTH   <span class="token punctuation">(</span><span class="token number">5.976e+24</span><span class="token punctuation">,</span> <span class="token number">6.37814e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     MARS    <span class="token punctuation">(</span><span class="token number">6.421e+23</span><span class="token punctuation">,</span> <span class="token number">3.3972e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     JUPITER <span class="token punctuation">(</span><span class="token number">1.9e+27</span><span class="token punctuation">,</span>   <span class="token number">7.1492e7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     SATURN  <span class="token punctuation">(</span><span class="token number">5.688e+26</span><span class="token punctuation">,</span> <span class="token number">6.0268e7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     URANUS  <span class="token punctuation">(</span><span class="token number">8.686e+25</span><span class="token punctuation">,</span> <span class="token number">2.5559e7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     NEPTUNE <span class="token punctuation">(</span><span class="token number">1.024e+26</span><span class="token punctuation">,</span> <span class="token number">2.4746e7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> mass<span class="token punctuation">;</span>   <span class="token comment">// in kilograms </span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span> <span class="token comment">// in meters </span>    <span class="token class-name">Planet</span><span class="token punctuation">(</span><span class="token keyword">double</span> mass<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>mass <span class="token operator">=</span> mass<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">mass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> mass<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">radius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> radius<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token comment">// universal gravitational constant  (m3 kg-1 s-2) </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">G</span> <span class="token operator">=</span> <span class="token number">6.67300E-11</span><span class="token punctuation">;</span>     <span class="token keyword">double</span> <span class="token function">surfaceGravity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token class-name">G</span> <span class="token operator">*</span> mass <span class="token operator">/</span> <span class="token punctuation">(</span>radius <span class="token operator">*</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">double</span> <span class="token function">surfaceWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> otherMass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> otherMass <span class="token operator">*</span> <span class="token function">surfaceGravity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java Planet &lt;earth_weight>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">double</span> earthWeight <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">double</span> mass <span class="token operator">=</span> earthWeight<span class="token operator">/</span>EARTH<span class="token punctuation">.</span><span class="token function">surfaceGravity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Planet</span> p <span class="token operator">:</span> <span class="token class-name">Planet</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your weight on %s is %f%n"</span><span class="token punctuation">,</span>                              p<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">surfaceWeight</span><span class="token punctuation">(</span>mass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">If</span> you run <span class="token class-name">Planet</span><span class="token punctuation">.</span><span class="token keyword">class</span> from the command line <span class="token keyword">with</span> <span class="token namespace">an</span> argument of <span class="token number">175</span><span class="token punctuation">,</span> you get <span class="token keyword">this</span> output<span class="token operator">:</span> $ java <span class="token class-name">Planet</span> <span class="token number">175</span> <span class="token class-name">Your</span> weight on MERCURY is <span class="token number">66.107583</span> <span class="token class-name">Your</span> weight on VENUS is <span class="token number">158.374842</span> <span class="token class-name">Your</span> weight on EARTH is <span class="token number">175.000000</span> <span class="token class-name">Your</span> weight on MARS is <span class="token number">66.279007</span> <span class="token class-name">Your</span> weight on JUPITER is <span class="token number">442.847567</span> <span class="token class-name">Your</span> weight on SATURN is <span class="token number">186.552719</span> <span class="token class-name">Your</span> weight on URANUS is <span class="token number">158.397260</span> <span class="token class-name">Your</span> weight on NEPTUNE is <span class="token number">199.207413</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-使用-Enum-实现单例模式"><a href="#Java-使用-Enum-实现单例模式" class="headerlink" title="Java 使用 Enum 实现单例模式"></a>Java 使用 Enum 实现单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">&#123;</span>INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SingletonEnum</span> <span class="token punctuation">&#123;</span>INSTANCE<span class="token punctuation">;</span><span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">// 这里我们可以自定义构造函数.</span><span class="token keyword">private</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"INSTANCE now created!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start get instance!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SingletonEnum</span> singleton <span class="token operator">=</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleton<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果:</span>start get instance<span class="token operator">!</span>INSTANCE now created<span class="token operator">!</span><span class="token number">1</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的SingletonEnum的定义利用的enum是一种特殊的class.代码中的第一行INSTANCE会被编译器编译为SingletonEnum本身的一个对象.当第一次访问SingletonEnum.INSTANCE时会创建该对象,并且enum变量的创建是线程安全的.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 使用枚举的单例模式  *  * @author yzl  * @see [相关类/方法]（可选）  * @since [产品/模块版本] （可选）  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>         INSTANCE<span class="token punctuation">;</span>                  <span class="token keyword">private</span> <span class="token class-name">EnumSingleton</span> singleton<span class="token punctuation">;</span>         <span class="token comment">//JVM会保证此方法绝对只调用一次 </span>        <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Enums&quot;&gt;&lt;a href=&quot;#Enums&quot; class=&quot;headerlink&quot; title=&quot;Enums&quot;&gt;&lt;/a&gt;Enums&lt;/h1&gt;&lt;h2 id=&quot;Enums-概念&quot;&gt;&lt;a href=&quot;#Enums-概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Java" scheme="http://wangzt568.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://wangzt568.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wangzt568.github.io/2021/02/14/hello-world/"/>
    <id>http://wangzt568.github.io/2021/02/14/hello-world/</id>
    <published>2021-02-14T18:15:41.731Z</published>
    <updated>2021-02-15T03:58:08.123Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>hexo是使用Markdown编辑文章的，我写的这些文章也都是用这种标记语言完成的。所以，我们先从Markdown说起。</p><a id="more"></a><h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown"></a>什么是Markdown</h2><p>Markdown语法<br>例文<br>你可以使用vim工具直接编辑md文件，也可以用记事本打开md文件编辑你的文章，也可以Markdown的编辑器编写，有很多在线的编辑器，何有不少客户端的编辑器，我是Mac系统，用的一个叫 Mou 的编辑器，还比较好使。Windows系统下，你可以自己找一下，应该也会有很好用的编辑器。</p><p>什么是Markdown</p><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。 ——维基百科</p><p>先简单介绍一下，Markdown的语法，具体怎么用，我相信大家一看例文就马上明白了。</p><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><p>1、分段： 两个回车</p><p>2、换行 两个空格 + 回车</p><p>3、标题 # ~ ###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</p><p>4、引用 &gt;</p><p>5、列表 * ， + ， - ， 1. ，选其中之一，注意后面有个空格</p><p>6、代码区块 四个空格 开头</p><p>7、链接</p><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">文字</a><br>8、图片</p><p><img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" loading="lazy"> //图片地址可以是本地路劲，也可以是网络地址<br>9、强调</p><p><strong>文字</strong> ， <strong>文字</strong> ， <em>文字</em> ， <em>文字</em><br>10、代码</p><p> <code>，</code></p><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>我们在前面的已经略微的接触了一些hexo的命令，如 hexo new “my blog” ， hexo server 等。下面来介绍一下我们经常会用到的hexo命令</p><p>1、新建<br>hexo new “my blog”<br>新建的文件在 hexo/source/_posts/my-blog.md</p><p>2、生成静态页面<br>hexo g<br>一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</p><p>3、开启本地服务<br>hexo s<br>这个命令，我之前已经用过了，开启本地hexo服务用的</p><p>4、部署<br>hexo d<br>部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令</p><p>5、清除 public<br>hexo clean<br>当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</p><p>作者：Johan007<br>链接：<a href="https://www.jianshu.com/p/643577a900f8">https://www.jianshu.com/p/643577a900f8</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Hexo-theme-obsidian"><a href="#Hexo-theme-obsidian" class="headerlink" title="Hexo-theme-obsidian"></a>Hexo-theme-obsidian</h2><p>v1.x | ᴅᴇsɪɢɴᴇᴅ &amp; ᴄᴏᴅᴇᴅ ʙʏ ᴛʀɪᴅɪᴀᴍᴏɴᴅ</p><blockquote><p>一款暗色的 Hexo 主题, 拥有响应式布局, 简约而优雅.</p></blockquote><p><img src="https://img.shields.io/github/v/release/TriDiamond/hexo-theme-obsidian" alt="Latest Release Version" loading="lazy"><br><img src="https://img.shields.io/github/release-date/TriDiamond/hexo-theme-obsidian" alt="Latest Release Date" loading="lazy"><br><img src="https://img.shields.io/github/license/TriDiamond/hexo-theme-obsidian" alt="License" loading="lazy"><br><a href="https://gitter.im/TriDiamond/hexo-theme-obsidian?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"><img src="https://badges.gitter.im/TriDiamond/hexo-theme-obsidian.svg" alt="Join the chat at https://gitter.im/TriDiamond/hexo-theme-obsidian" loading="lazy"></a></p><p><strong><a href="http://tridiamond.me/">预览</a></strong> | <strong><a href="https://github.com/TriDiamond/hexo-theme-obsidian/blob/master/CHANGELOG_CN.md">更变日志</a></strong></p><p>🇺🇸 <strong><a href="https://github.com/TriDiamond/hexo-theme-obsidian/blob/master/README.md">English Doc</a></strong> |<br><strong><a href="https://github.com/TriDiamond/hexo-theme-obsidian/blob/master/CHANGELOG.md">ChangeLog</a></strong></p><p><img src="https://res.cloudinary.com/tridiamond/image/upload/v1573323147/blog/A-Obsidian-full_ubmo0d.png" alt="screenshot" loading="lazy"></p><details><summary>更多主题展示</summary><h2 id=""><a href="#" class="headerlink" title=""></a></h2></details><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/TriDiamond/hexo-theme-obsidian.git obsidian<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开 <code>Hexo</code> 配置文件 <code>_config.yml</code>, 设置主题为 <code>obsidian</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> obsidian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>打开 <code>/themes/obsidian/_config.yml</code> 文件可以改变主题配置</p><details><summary>详细配置文件，点击展开</summary><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#! ---------------------------------------------------------------</span><span class="token comment">#! 版本`v1.3.5`开始代码高亮已经用`codemirror`替换了`highlight.js`，</span><span class="token comment">#! 但是Hexo默认的highlight配置还是需要关闭的。</span><span class="token comment">#! ！！所以务必把Hexo默认的highlight配置改为`enable: false` ！！</span><span class="token comment">#! ---------------------------------------------------------------</span><span class="token comment">#! highlight:</span><span class="token comment">#!  enable: false</span><span class="token comment">#!  line_number: true</span><span class="token comment">#!  auto_detect: true</span><span class="token comment">#!  tab_replace:</span><span class="token comment">#! ---------------------------------------------------------------</span><span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># 主题默认设置</span><span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># 菜单设置 | 格式 = 菜单名: 菜单url</span><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">PAGE</span><span class="token punctuation">:</span> /page<span class="token comment"># 分类页和标签页自定义标题配置</span><span class="token key atrule">page_titles</span><span class="token punctuation">:</span>  <span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token string">"Categories"</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token string">"Tags"</span>  <span class="token key atrule">archives</span><span class="token punctuation">:</span> <span class="token string">"Archived"</span><span class="token comment"># 是否启用目录</span><span class="token key atrule">TOC</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 首页封面使用的封面图， 不配置默认使用cover配置的图片</span><span class="token key atrule">welcome_cover</span><span class="token punctuation">:</span> /img/cover.jpg<span class="token comment"># 文章默认封面图</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> /img/welcome<span class="token punctuation">-</span>cover.jpg<span class="token comment"># 文章内的默认头像</span><span class="token key atrule">avatar</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//s2.ax1x.com/2019/09/19/nLtSiD.png<span class="token comment"># 关闭默认滚动条</span><span class="token key atrule">scrollbar</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 网站的关键词，都好分割，用于SEO优化</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> TriDiamond Obsidian<span class="token comment"># 网站口号</span><span class="token key atrule">descriptionOne</span><span class="token punctuation">:</span> <span class="token string">"Think like an artist, develop like an artisan"</span><span class="token key atrule">descriptionTwo</span><span class="token punctuation">:</span> <span class="token string">"艺术家思维去思考问题，工匠创造精神去开发"</span><span class="token comment"># 如果使用google analytics, 请填写ID</span><span class="token key atrule">google_analytics</span><span class="token punctuation">:</span><span class="token comment"># 网页图标</span><span class="token key atrule">favicon</span><span class="token punctuation">:</span> /img/favicon.png<span class="token comment"># rss文件</span><span class="token key atrule">rss</span><span class="token punctuation">:</span> atom.xml<span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># 文章音乐设置</span><span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># 自动播放音乐</span><span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 默认mp3文件</span><span class="token key atrule">mp3</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> statics/chengdu.mp3<span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># 主题插件</span><span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># Gitalk 评论插件</span><span class="token comment"># 查看 https://github.com/gitalk/gitalk</span><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">autoExpand</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">clientID</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token key atrule">admin</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token comment"># Ensure uniqueness and length less than 50</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> location.pathname  <span class="token comment"># Facebook-like distraction</span><span class="token comment"># Valine 评论插件 (推荐使用!)</span><span class="token comment"># 查看 https://valine.js.org/quickstart.html</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">app_id</span><span class="token punctuation">:</span>  <span class="token key atrule">app_key</span><span class="token punctuation">:</span>  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">"mp"</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">"Leave your throughs behind~"</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 文章字数和阅读时间统计插件</span><span class="token comment"># see https://github.com/theme-next/hexo-symbols-count-time</span><span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">awl</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token key atrule">wpm</span><span class="token punctuation">:</span> <span class="token number">275</span>  <span class="token key atrule">suffix</span><span class="token punctuation">:</span> mins.<span class="token comment"># html截取插件（用于首页截取内容）</span><span class="token comment"># see https://github.com/TriDiamond/hexo-html-truncate</span><span class="token key atrule">html_truncate</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 文章保留多少个字符</span>  <span class="token key atrule">postLength</span><span class="token punctuation">:</span> <span class="token number">250</span>  <span class="token comment"># 封面文章保留多少个字符</span>  <span class="token key atrule">coverLength</span><span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token comment"># 省略符号</span>  <span class="token key atrule">ellipsis</span><span class="token punctuation">:</span> <span class="token string">"..."</span>  <span class="token comment"># 需要过滤的html标签</span>  <span class="token key atrule">excludes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"img"</span><span class="token punctuation">]</span>  <span class="token comment"># 截取时保留空白空格字符</span>  <span class="token key atrule">keepWhitespaces</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 截取到最后的时候保留完成的字（只对英文有用）</span>  <span class="token key atrule">reserveLastWord</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># Busuanzi 浏览量统计插件</span><span class="token comment"># see http://ibruce.info/2015/04/04/busuanzi/</span><span class="token key atrule">busuanzi</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># Sharejs 分享</span><span class="token comment"># see https://github.com/overtrue/share.js/</span><span class="token key atrule">sharejs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">disabled</span><span class="token punctuation">:</span> <span class="token string">"facebook,douban,linkedin,diandian,tencent,google"</span><span class="token comment"># 使用了codemirror替换了highlight.js，代码高亮更加完善，也更接近IDE的高亮样式</span><span class="token comment"># 默认已经填入了一些语言的mode支持，如果你需要其他语言的支持，请查看codemirror官网的mode</span><span class="token comment"># modes文档请看: https://codemirror.net/mode/</span><span class="token comment"># codemirror官网： https://codemirror.net/</span><span class="token comment"># 默认支持了：JS, HTML, CSS, PHP, JAVA, C, C#, C++, SHELL, PYTHON.</span><span class="token key atrule">codemirror</span><span class="token punctuation">:</span>  <span class="token key atrule">modes</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span><span class="token string">"javascript"</span><span class="token punctuation">,</span> <span class="token string">"css"</span><span class="token punctuation">,</span> <span class="token string">"xml"</span><span class="token punctuation">,</span> <span class="token string">"htmlmixed"</span><span class="token punctuation">,</span> <span class="token string">"clike"</span><span class="token punctuation">,</span> <span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">]</span><span class="token comment"># 启用 mathjax 支持</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h3><p>评论插件可以选择使用 <code>Valine</code> 或者 <code>Gitalk</code></p><ul><li>如果你是使用 <code>Valine</code>, 你需要关闭 <code>busuanzi</code>, 因为 Valine 自带有文章浏览量统计.</li><li>如果你是使用 <code>Gitalk</code>, 你可以打开 <code>busuanzi</code> 文章详情页就会显示文章浏览量统计.</li></ul><h3 id="代码块样式"><a href="#代码块样式" class="headerlink" title="代码块样式"></a>代码块样式</h3><blockquote><p>版本<code>v1.3.5</code>开始代码高亮已经用<code>codemirror</code>替换了<code>highlight.js</code>，<br>但是 Hexo 默认的 highlight 配置还是需要关闭的。<br>！！所以无比把 Hexo 默认的 highlight 配置改为<code>enable: flase</code> ！！</p></blockquote><p>在博客根目录的<code>_config.yml</code>修改</p><blockquote><p>⚠️ 注意不是主题里面的<code>_config.yml</code>，在主题里面加这个是无效的哦</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  tab_replace<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Codemirror 代码高亮配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 使用了codemirror替换了highlight.js，代码高亮更加完善，也更接近IDE的高亮样式</span><span class="token comment"># 默认已经填入了一些语言的mode支持，如果你需要其他语言的支持，请查看codemirror官网的mode</span><span class="token comment"># modes文档请看: https://codemirror.net/mode/</span><span class="token comment"># codemirror官网： https://codemirror.net/</span><span class="token comment"># 默认支持了：JS, HTML, CSS, PHP, JAVA, C, C#, C++, SHELL, PYTHON.</span><span class="token key atrule">codemirror</span><span class="token punctuation">:</span>  <span class="token key atrule">modes</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span><span class="token string">"javascript"</span><span class="token punctuation">,</span> <span class="token string">"css"</span><span class="token punctuation">,</span> <span class="token string">"xml"</span><span class="token punctuation">,</span> <span class="token string">"htmlmixed"</span><span class="token punctuation">,</span> <span class="token string">"clike"</span><span class="token punctuation">,</span> <span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改了默认 highlight 配置后需要重新生成文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文章展示字符数控制"><a href="#文章展示字符数控制" class="headerlink" title="文章展示字符数控制"></a>文章展示字符数控制</h3><p>文章里面的参数<code>preview</code>控制在首页展示时保留的字符数</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">title: My awesome titledate: 2019-07-14 18:38:45categories: - Category1 - Category2tags: - Tag1 - Tag2mp3: http://domain.com/awesome.mp3cover: http://domain.com/awesome.jpgpreview: 300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章模版"><a href="#文章模版" class="headerlink" title="文章模版"></a>文章模版</h3><p>文章模版设置</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">title: My awesome titledate: 2019-07-14 18:38:45categories: - 分类 1 - 分类 2tags: - 标签 1 - 标签 2mp3: http://domain.com/awesome.mp3cover: http://domain.com/awesome.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h3><p>运行 Hexo 命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分类模版</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-07-14 12:39:04</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>主题会自动生成分类内容，模版里面留空不用改动就可以了。</p></blockquote><h3 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h3><p>运行 Hexo 命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标签模版</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2014-12-22 12:39:04</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>主题会自动生成标签内容，模版里面留空不用改动就可以了。</p></blockquote><h3 id="MathJax-支持"><a href="#MathJax-支持" class="headerlink" title="MathJax 支持"></a>MathJax 支持</h3><p>默认是启用 MathJax 支持的, 如果需要关闭改变主题配置为 <code>false</code>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 启用 mathjax 支持</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><blockquote><p>更新前请先备份主题里的 <code>_config.yml</code> 文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> themes/osidian<span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用搜索功能"><a href="#使用搜索功能" class="headerlink" title="使用搜索功能"></a>使用搜索功能</h2><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><p>NPM 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你的根目录配置 <code>_config.yml</code> 里面添加 hexo-generator-search 的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重新生成静态文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p>做了一个 <a href="https://typora.io/"><code>Typro</code></a> 主题 <a href="https://github.com/TriDiamond/typro-theme-obsidian"><code>Obsidian</code></a> 专门给写博客的你们.</p><h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><blockquote><p>大家记得先看一下<a href="https://github.com/TriDiamond/hexo-theme-obsidian/issues">ISSUE</a>里面有没有你的问题，已经解答了的。<br>很有可能你的问题已经被问过了，或者可以在 Issue 里面就找到答案了！谢谢配合！</p></blockquote><p>可以通过以下方式反馈问题：</p><ul><li><a href="https://github.com/TriDiamond/hexo-theme-obsidian/issues/new">创建新 issue!</a></li><li>加入 QQ 群 <code>909955326</code></li><li><a href="https://t.me/joinchat/R2m4eho2lbcHLR7nDvxd6A">加入 Telegram 群</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;p&gt;hexo是使用Markdown编辑文章的，我写的这些文章也都是用这种标记语言完成的。所以，我们先从Markdown说起。&lt;/p&gt;</summary>
    
    
    
    <category term="MD" scheme="http://wangzt568.github.io/categories/MD/"/>
    
    
    <category term="MarkDown" scheme="http://wangzt568.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>448. Find All Numbers Disappeared in an Array</title>
    <link href="http://wangzt568.github.io/2020/08/21/448-Find-All-Numbers-Disappeared-in-an-Array/"/>
    <id>http://wangzt568.github.io/2020/08/21/448-Find-All-Numbers-Disappeared-in-an-Array/</id>
    <published>2020-08-21T14:11:13.000Z</published>
    <updated>2020-08-21T14:13:10.158Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p><p><strong>Example:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input:[4,3,2,7,8,2,3,1]Output:[5,6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nums<span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Given an array of integers where 1 ≤ a[i] ≤ &lt;em&gt;n&lt;/em&gt; (&lt;em&gt;n&lt;/em&gt; = size of array), some elements appear twice and others appear once.&lt;/</summary>
      
    
    
    
    <category term="Leet" scheme="http://wangzt568.github.io/categories/Leet/"/>
    
    <category term="E" scheme="http://wangzt568.github.io/categories/Leet/E/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>559.Maximum Depth of N-ary</title>
    <link href="http://wangzt568.github.io/2020/08/21/559-Maximum-Depth-of-N-ary/"/>
    <id>http://wangzt568.github.io/2020/08/21/559-Maximum-Depth-of-N-ary/</id>
    <published>2020-08-21T14:06:43.000Z</published>
    <updated>2020-08-21T14:13:13.023Z</updated>
    
    <content type="html"><![CDATA[<ol start="559"><li>Maximum Depth of N-ary Tree</li></ol><p>Easy</p><p>91050Add to ListShare</p><p>Given a n-ary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="img" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">Input: root &#x3D; [1,null,3,2,4,null,5,6]Output: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" alt="img" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">Input: root &#x3D; [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]Output: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li><li>The total number of nodes is between <code>[0, 10^4]</code>.</li></ul><p>DFS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*// Definition for a Node.class Node &#123;    public int val;    public List&lt;Node> children;    public Node() &#123;&#125;    public Node(int _val) &#123;        val = _val;    &#125;    public Node(int _val, List&lt;Node> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>          <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> child <span class="token operator">:</span> root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BFS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> child<span class="token operator">:</span> current<span class="token punctuation">.</span>children<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                depth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ol start=&quot;559&quot;&gt;
&lt;li&gt;Maximum Depth of N-ary Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Easy&lt;/p&gt;
&lt;p&gt;91050Add to ListShare&lt;/p&gt;
&lt;p&gt;Given a n-ary tree, find its maximum</summary>
      
    
    
    
    <category term="Leet" scheme="http://wangzt568.github.io/categories/Leet/"/>
    
    <category term="E" scheme="http://wangzt568.github.io/categories/Leet/E/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
    <category term="tree" scheme="http://wangzt568.github.io/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Eureka</title>
    <link href="http://wangzt568.github.io/2020/08/18/SpringCloud-Eureka/"/>
    <id>http://wangzt568.github.io/2020/08/18/SpringCloud-Eureka/</id>
    <published>2020-08-19T02:22:39.000Z</published>
    <updated>2020-08-19T02:22:39.145Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://wangzt568.github.io/2020/08/18/SpringCloud/"/>
    <id>http://wangzt568.github.io/2020/08/18/SpringCloud/</id>
    <published>2020-08-19T02:22:11.000Z</published>
    <updated>2020-08-19T02:22:11.339Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Angular Start</title>
    <link href="http://wangzt568.github.io/2020/08/17/Angular-Start/"/>
    <id>http://wangzt568.github.io/2020/08/17/Angular-Start/</id>
    <published>2020-08-17T14:47:31.000Z</published>
    <updated>2020-08-17T16:21:07.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h1><p>To use the Angular framework, you should be familiar with the following:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">JavaScript</a></li><li><a href="https://developer.mozilla.org/docs/Learn/HTML/Introduction_to_HTML">HTML</a></li><li><a href="https://developer.mozilla.org/docs/Learn/CSS/First_steps">CSS</a></li></ul><p>Knowledge of <a href="https://www.typescriptlang.org/">TypeScript</a> is helpful, but not required.</p><p>To install Angular on your local system, you need the following:</p><ul><li><p><strong>Node.js</strong></p><p>Angular requires a <a href="https://nodejs.org/about/releases">current, active LTS, or maintenance LTS</a> version of Node.js.</p><p>For information about specific version requirements, see the <code>engines</code> key in the <a href="https://unpkg.com/@angular/cli/package.json">package.json</a> file.</p><p>For more information on installing Node.js, see <a href="http://nodejs.org/">nodejs.org</a>. If you are unsure what version of Node.js runs on your system, run <code>node -v</code> in a terminal window.</p></li></ul><ul><li><p><strong>npm package manager</strong></p><p>Angular, the Angular CLI, and Angular applications depend on <a href="https://docs.npmjs.com/getting-started/what-is-npm">npm packages</a> for many features and functions. To download and install npm packages, you need an npm package manager. This guide uses the <a href="https://docs.npmjs.com/cli/install">npm client</a> command line interface, which is installed with <code>Node.js</code> by default. To check that you have the npm client installed, run <code>npm -v</code> in a terminal window.</p></li></ul><h2 id="Install-the-Angular-CLI"><a href="#Install-the-Angular-CLI" class="headerlink" title="Install the Angular CLI"></a>Install the Angular CLI</h2><p>You use the Angular CLI to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.</p><p>To install the Angular CLI, open a terminal window and run the following command:</p><pre class="line-numbers language-none"><code class="language-none">npm install -g @angular&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Create-a-workspace-and-initial-application"><a href="#Create-a-workspace-and-initial-application" class="headerlink" title="Create a workspace and initial application"></a>Create a workspace and initial application</h2><p>You develop apps in the context of an Angular <a href="https://angular.io/guide/glossary#workspace"><strong>workspace</strong></a>.</p><p>To create a new workspace and initial starter app:</p><ol><li><p>Run the CLI command <code>ng new</code> and provide the name <code>my-app</code>, as shown here:</p><pre class="line-numbers language-none"><code class="language-none">ng new my-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>The <code>ng new</code> command prompts you for information about features to include in the initial app. Accept the defaults by pressing the Enter or Return key.</p></li></ol><p>The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes.</p><p>The CLI creates a new workspace and a simple Welcome app, ready to run.</p><p>You also have the option to use Angular’s strict mode, which can help you write better, more maintainable code. For more information, see <a href="https://angular.io/guide/strict-mode">Strict mode</a>.</p><h2 id="Run-the-application"><a href="#Run-the-application" class="headerlink" title="Run the application"></a>Run the application</h2><p>The Angular CLI includes a server, so that you can build and serve your app locally.</p><ol><li>Navigate to the workspace folder, such as <code>my-app</code>.</li><li>Run the following command:</li></ol><pre class="line-numbers language-none"><code class="language-none">cd my-app ng serve --open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The <code>ng serve</code> command launches the server, watches your files, and rebuilds the app as you make changes to those files.</p><p>The <code>--open</code> (or just <code>-o</code>) option automatically opens your browser to <code>http://localhost:4200/</code>.</p><h1 id="Angular-concepts"><a href="#Angular-concepts" class="headerlink" title="Angular concepts"></a>Angular concepts</h1><p>Angular is a platform and framework for building single-page client applications using HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your apps.</p><p>The architecture of an Angular application relies on certain fundamental concepts. The basic building blocks are <em>NgModules</em>, which provide a compilation context for <em>components</em>. NgModules collect related code into functional sets; an Angular app is defined by a set of NgModules. An app always has at least a <em>root module</em> that enables bootstrapping, and typically has many more <em>feature modules</em>.</p><ul><li>Components define <em>views</em>, which are sets of screen elements that Angular can choose among and modify according to your program logic and data.</li><li>Components use <em>services</em>, which provide specific functionality not directly related to views. Service providers can be <em>injected</em> into components as <em>dependencies</em>, making your code modular, reusable, and efficient.</li></ul><p>Modules, components and services are classes that use <em>decorators</em>. These decorators mark their type and provide metadata that tells Angular how to use them.</p><ul><li>The metadata for a component class associates it with a <em>template</em> that defines a view. A template combines ordinary HTML with Angular <em>directives</em> and <em>binding markup</em> that allow Angular to modify the HTML before rendering it for display.</li><li>The metadata for a service class provides the information Angular needs to make it available to components through <em>dependency injection (DI)</em>.</li></ul><p>An app’s components typically define many views, arranged hierarchically. Angular provides the <code>Router</code> service to help you define navigation paths among views. The router provides sophisticated in-browser navigational capabilities.</p><h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>Angular apps are modular and Angular has its own modularity system called <em>NgModules</em>. NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities. They can contain components, service providers, and other code files whose scope is defined by the containing NgModule. They can import functionality that is exported from other NgModules, and export selected functionality for use by other NgModules.</p><p>Every Angular app has at least one NgModule class, <a href="https://angular.io/guide/bootstrapping">the <em>root module</em></a>, which is conventionally named <code>AppModule</code> and resides in a file named <code>app.module.ts</code>. You launch your app by <em>bootstrapping</em> the root NgModule.</p><p>While a small application might have only one NgModule, most apps have many more <em>feature modules</em>. The <em>root</em> NgModule for an app is so named because it can include child NgModules in a hierarchy of any depth.</p><h2 id="NgModule-metadata"><a href="#NgModule-metadata" class="headerlink" title="NgModule metadata"></a>NgModule metadata</h2><p>An NgModule is defined by a class decorated with <code>@NgModule()</code>. The <code>@NgModule()</code> decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</p><ul><li><code>declarations</code>: The <a href="https://angular.io/guide/architecture-components">components</a>, <em>directives</em>, and <em>pipes</em> that belong to this NgModule.</li><li><code>exports</code>: The subset of declarations that should be visible and usable in the <em>component templates</em> of other NgModules.</li><li><code>imports</code>: Other modules whose exported classes are needed by component templates declared in <em>this</em> NgModule.</li><li><code>providers</code>: Creators of <a href="https://angular.io/guide/architecture-services">services</a> that this NgModule contributes to the global collection of services; they become accessible in all parts of the app. (You can also specify providers at the component level, which is often preferred.)</li><li><code>bootstrap</code>: The main application view, called the <em>root component</em>, which hosts all other app views. Only the <em>root NgModule</em> should set the <code>bootstrap</code> property.</li></ul><p>Here’s a simple root NgModule definition.</p><p>src/app/app.module.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NgModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BrowserModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span>      <span class="token punctuation">[</span> BrowserModule <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span>    <span class="token punctuation">[</span> Logger <span class="token punctuation">]</span><span class="token punctuation">,</span>  declarations<span class="token operator">:</span> <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span>      <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token operator">:</span>    <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AppComponent</code> is included in the <code>exports</code> list here for illustration; it isn’t actually necessary in this example. A root NgModule has no reason to <em>export</em> anything because other modules don’t need to <em>import</em> the root NgModule.</p><h2 id="NgModules-and-components"><a href="#NgModules-and-components" class="headerlink" title="NgModules and components"></a>NgModules and components</h2><p>NgModules provide a <em>compilation context</em> for their components. A root NgModule always has a root component that is created during bootstrap, but any NgModule can include any number of additional components, which can be loaded through the router or created through the template. The components that belong to an NgModule share a compilation context.</p><p><img src="https://angular.io/generated/images/guide/architecture/compilation-context.png" alt="Component compilation context" loading="lazy"></p><p>A component and its template together define a <em>view</em>. A component can contain a <em>view hierarchy</em>, which allows you to define arbitrarily complex areas of the screen that can be created, modified, and destroyed as a unit. A view hierarchy can mix views defined in components that belong to different NgModules. This is often the case, especially for UI libraries.</p><p><img src="https://angular.io/generated/images/guide/architecture/view-hierarchy.png" alt="View hierarchy" loading="lazy"></p><p>When you create a component, it’s associated directly with a single view, called the <em>host view</em>. The host view can be the root of a view hierarchy, which can contain <em>embedded views</em>, which are in turn the host views of other components. Those components can be in the same NgModule, or can be imported from other NgModules. Views in the tree can be nested to any depth.</p><p><strong>Note:</strong> The hierarchical structure of views is a key factor in the way Angular detects and responds to changes in the DOM and app data.</p><h2 id="NgModules-and-JavaScript-modules"><a href="#NgModules-and-JavaScript-modules" class="headerlink" title="NgModules and JavaScript modules"></a>NgModules and JavaScript modules</h2><p>The NgModule system is different from and unrelated to the JavaScript (ES2015) module system for managing collections of JavaScript objects. These are <em>complementary</em> module systems that you can use together to write your apps.</p><p>In JavaScript each <em>file</em> is a module and all objects defined in the file belong to that module. The module declares some objects to be public by marking them with the <code>export</code> key word. Other JavaScript modules use <em>import statements</em> to access public objects from other modules.</p><pre class="line-numbers language-none"><code class="language-none">import &#123; NgModule &#125; from &#39;@angular&#x2F;core&#39;; import &#123; AppComponent &#125; from &#39;.&#x2F;app.component&#39;;export class AppModule &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://exploringjs.com/es6/ch_modules.html">Learn more about the JavaScript module system on the web.</a></p><h2 id="Angular-libraries"><a href="#Angular-libraries" class="headerlink" title="Angular libraries"></a>Angular libraries</h2><p><img src="https://angular.io/generated/images/guide/architecture/library-module.png" alt="Component" loading="lazy"></p><p>Angular loads as a collection of JavaScript modules. You can think of them as library modules. Each Angular library name begins with the <code>@angular</code> prefix. Install them with the node package manager <code>npm</code> and import parts of them with JavaScript <code>import</code> statements.</p><p>For example, import Angular’s <code>Component</code> decorator from the <code>@angular/core</code> library like this.</p><pre class="line-numbers language-none"><code class="language-none">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>You also import NgModules from Angular <em>libraries</em> using JavaScript import statements. For example, the following code imports the <code>BrowserModule</code> NgModule from the <code>platform-browser</code> library.</p><pre class="line-numbers language-none"><code class="language-none">import &#123; BrowserModule &#125; from &#39;@angular&#x2F;platform-browser&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>In the example of the simple root module above, the application module needs material from within <code>BrowserModule</code>. To access that material, add it to the <code>@NgModule</code> metadata <code>imports</code> like this.</p><pre class="line-numbers language-none"><code class="language-none">imports:      [ BrowserModule ],<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>In this way you’re using the Angular and JavaScript module systems <em>together</em>. Although it’s easy to confuse the two systems, which share the common vocabulary of “imports” and “exports”, you will become familiar with the different contexts in which they are used.</p><p>Learn more from the <a href="https://angular.io/guide/ngmodules">NgModules</a> guide.</p><h1 id="Components-and-templates"><a href="#Components-and-templates" class="headerlink" title="Components and templates"></a>Components and templates</h1><p>A <em>component</em> controls a patch of screen called a <a href="https://angular.io/guide/glossary#view"><em>view</em></a>. For example, individual components define and control each of the following views from the <a href="https://angular.io/tutorial">Tour of Heroes tutorial</a>:</p><ul><li>The app root with the navigation links.</li><li>The list of heroes.</li><li>The hero editor.</li></ul><p>You define a component’s application logic—what it does to support the view—inside a class. The class interacts with the view through an API of properties and methods.</p><p>For example, <code>HeroListComponent</code> has a <code>heroes</code> property that holds an array of heroes. Its <code>selectHero()</code> method sets a <code>selectedHero</code> property when the user clicks to choose a hero from that list. The component acquires the heroes from a service, which is a TypeScript <a href="http://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties">parameter property</a> on the constructor. The service is provided to the component through the dependency injection system.</p><p>src/app/hero-list.component.ts (class)`</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">&#123;</span>  heroes<span class="token operator">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  selectedHero<span class="token operator">:</span> Hero<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> service<span class="token operator">:</span> HeroService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heroes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">selectHero</span><span class="token punctuation">(</span>hero<span class="token operator">:</span> Hero<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedHero <span class="token operator">=</span> hero<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Angular creates, updates, and destroys components as the user moves through the application. Your app can take action at each moment in this lifecycle through optional <a href="https://angular.io/guide/lifecycle-hooks">lifecycle hooks</a>, like <code>ngOnInit()</code>.</p><h2 id="Component-metadata"><a href="#Component-metadata" class="headerlink" title="Component metadata"></a>Component metadata</h2><p><img src="https://angular.io/generated/images/guide/architecture/metadata.png" alt="Metadata" loading="lazy"></p><p>The <code>@Component</code> decorator identifies the class immediately below it as a component class, and specifies its metadata. In the example code below, you can see that <code>HeroListComponent</code> is just a class, with no special Angular notation or syntax at all. It’s not a component until you mark it as one with the <code>@Component</code> decorator.</p><p>The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view. In particular, it associates a <em>template</em> with the component, either directly with inline code, or by reference. Together, the component and its template describe a <em>view</em>.</p><p>In addition to containing or pointing to the template, the <code>@Component</code> metadata configures, for example, how the component can be referenced in HTML and what services it requires.</p><p>Here’s an example of basic metadata for <code>HeroListComponent</code>.</p><p>src/app/hero-list.component.ts (metadata)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  selector<span class="token operator">:</span>    <span class="token string">'app-hero-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token operator">:</span> <span class="token string">'./hero-list.component.html'</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span>  <span class="token punctuation">[</span> HeroService <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">&#123;</span><span class="token comment">/* . . . */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This example shows some of the most useful <code>@Component</code> configuration options:</p><ul><li><code>selector</code>: A CSS selector that tells Angular to create and insert an instance of this component wherever it finds the corresponding tag in template HTML. For example, if an app’s HTML contains <code>&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</code>, then Angular inserts an instance of the <code>HeroListComponent</code> view between those tags.</li><li><code>templateUrl</code>: The module-relative address of this component’s HTML template. Alternatively, you can provide the HTML template inline, as the value of the <code>template</code> property. This template defines the component’s <em>host view</em>.</li><li><code>providers</code>: An array of <a href="https://angular.io/guide/glossary#provider">providers</a> for services that the component requires. In the example, this tells Angular how to provide the <code>HeroService</code> instance that the component’s constructor uses to get the list of heroes to display.</li></ul><h2 id="Templates-and-views"><a href="#Templates-and-views" class="headerlink" title="Templates and views"></a>Templates and views</h2><p><img src="https://angular.io/generated/images/guide/architecture/template.png" alt="Template" loading="lazy"></p><p>You define a component’s view with its companion template. A template is a form of HTML that tells Angular how to render the component.</p><p>Views are typically arranged hierarchically, allowing you to modify or show and hide entire UI sections or pages as a unit. The template immediately associated with a component defines that component’s <em>host view</em>. The component can also define a <em>view hierarchy</em>, which contains <em>embedded views</em>, hosted by other components.</p><p><img src="https://angular.io/generated/images/guide/architecture/component-tree.png" alt="Component tree" loading="lazy"></p><p>A view hierarchy can include views from components in the same NgModule, but it also can (and often does) include views from components that are defined in different NgModules.</p><h2 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h2><p>A template looks like regular HTML, except that it also contains Angular <a href="https://angular.io/guide/template-syntax">template syntax</a>, which alters the HTML based on your app’s logic and the state of app and DOM data. Your template can use <em>data binding</em> to coordinate the app and DOM data, <em>pipes</em> to transform data before it is displayed, and <em>directives</em> to apply app logic to what gets displayed.</p><p>For example, here is a template for the Tutorial’s <code>HeroListComponent</code>.</p><p>src/app/hero-list.component.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hero List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>Pick a hero from the list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectHero(hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;hero.name&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span> <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This template uses typical HTML elements like <code>&lt;h2&gt;</code> and <code>&lt;p&gt;</code>, and also includes Angular template-syntax elements, <code>*ngFor</code>, <code>&#123;&#123;hero.name&#125;&#125;</code>, <code>(click)</code>, <code>[hero]</code>, and <code>&lt;app-hero-detail&gt;</code>. The template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</p><ul><li>The <code>*ngFor</code> directive tells Angular to iterate over a list.</li><li><code>&#123;&#123;hero.name&#125;&#125;</code>, <code>(click)</code>, and <code>[hero]</code> bind program data to and from the DOM, responding to user input. See more about <a href="https://angular.io/guide/architecture-components#data-binding">data binding</a> below.</li><li>The <code>&lt;app-hero-detail&gt;</code> tag in the example is an element that represents a new component, <code>HeroDetailComponent</code>. <code>HeroDetailComponent</code> (code not shown) defines the hero-detail child view of <code>HeroListComponent</code>. Notice how custom components like this mix seamlessly with native HTML in the same layouts.</li></ul><h3 id="Data-binding"><a href="#Data-binding" class="headerlink" title="Data binding"></a>Data binding</h3><p>Without a framework, you would be responsible for pushing data values into the HTML controls and turning user responses into actions and value updates. Writing such push and pull logic by hand is tedious, error-prone, and a nightmare to read, as any experienced front-end JavaScript programmer can attest.</p><p>Angular supports <em>two-way data binding</em>, a mechanism for coordinating the parts of a template with the parts of a component. Add binding markup to the template HTML to tell Angular how to connect both sides.</p><p>The following diagram shows the four forms of data binding markup. Each form has a direction: to the DOM, from the DOM, or both.</p><p><img src="https://angular.io/generated/images/guide/architecture/databinding.png" alt="Data Binding" loading="lazy"></p><p>This example from the <code>HeroListComponent</code> template uses three of these forms.</p><p>src/app/hero-list.component.html (binding)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123;hero.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectHero(hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>The <code>&#123;&#123;hero.name&#125;&#125;</code> <a href="https://angular.io/guide/displaying-data#interpolation"><em>interpolation</em></a> displays the component’s <code>hero.name</code> property value within the <code>&lt;li&gt;</code> element.</li><li>The <code>[hero]</code> <a href="https://angular.io/guide/property-binding"><em>property binding</em></a> passes the value of <code>selectedHero</code> from the parent <code>HeroListComponent</code> to the <code>hero</code> property of the child <code>HeroDetailComponent</code>.</li><li>The <code>(click)</code> <a href="https://angular.io/guide/user-input#binding-to-user-input-events"><em>event binding</em></a> calls the component’s <code>selectHero</code> method when the user clicks a hero’s name.</li></ul><p>Two-way data binding (used mainly in <a href="https://angular.io/guide/forms">template-driven forms</a>) combines property and event binding in a single notation. Here’s an example from the <code>HeroDetailComponent</code> template that uses two-way data binding with the <code>ngModel</code> directive.</p><p>src/app/hero-detail.component.html (ngModel) &lt;input [(ngModel)]=”hero.name”&gt;`</p><p>In two-way binding, a data property value flows to the input box from the component as with property binding. The user’s changes also flow back to the component, resetting the property to the latest value, as with event binding.</p><p>Angular processes <em>all</em> data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components.</p><p><img src="https://angular.io/generated/images/guide/architecture/component-databinding.png" alt="Data Binding" loading="lazy"></p><p>Data binding plays an important role in communication between a template and its component, and is also important for communication between parent and child components.</p><p><img src="https://angular.io/generated/images/guide/architecture/parent-child-binding.png" alt="Parent/Child binding" loading="lazy"></p><h3 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h3><p>Angular pipes let you declare display-value transformations in your template HTML. A class with the <code>@Pipe</code> decorator defines a function that transforms input values to output values for display in a view.</p><p>Angular defines various pipes, such as the <a href="https://angular.io/api/common/DatePipe">date</a> pipe and <a href="https://angular.io/api/common/CurrencyPipe">currency</a> pipe; for a complete list, see the <a href="https://angular.io/api?type=pipe">Pipes API list</a>. You can also define new pipes.</p><p>To specify a value transformation in an HTML template, use the <a href="https://angular.io/guide/template-expression-operators#pipe">pipe operator (|)</a>.</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#123;interpolated_value | pipe_name&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>You can chain pipes, sending the output of one pipe function to be transformed by another pipe function. A pipe can also take arguments that control how it performs its transformation. For example, you can pass the desired format to the <code>date</code> pipe.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Default format: output 'Jun 15, 2015'--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Today is &#123;&#123;today | date&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- fullDate format: output 'Monday, June 15, 2015'--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The date is &#123;&#123;today | date:'fullDate'&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- shortTime format: output '9:43 AM'--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The time is &#123;&#123;today | date:'shortTime'&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h3><p><img src="https://angular.io/generated/images/guide/architecture/directive.png" alt="Directives" loading="lazy"></p><p>Angular templates are <em>dynamic</em>. When Angular renders them, it transforms the DOM according to the instructions given by <em>directives</em>. A directive is a class with a <code>@Directive()</code> decorator.</p><p>A component is technically a directive. However, components are so distinctive and central to Angular applications that Angular defines the <code>@Component()</code> decorator, which extends the <code>@Directive()</code> decorator with template-oriented features.</p><p>In addition to components, there are two other kinds of directives: <em>structural</em> and <em>attribute</em>. Angular defines a number of directives of both kinds, and you can define your own using the <code>@Directive()</code> decorator.</p><p>Just as for components, the metadata for a directive associates the decorated class with a <code>selector</code> element that you use to insert it into HTML. In templates, directives typically appear within an element tag as attributes, either by name or as the target of an assignment or a binding.</p><h4 id="Structural-directives"><a href="#Structural-directives" class="headerlink" title="Structural directives"></a>Structural directives</h4><p><em>Structural directives</em> alter layout by adding, removing, and replacing elements in the DOM. The example template uses two built-in structural directives to add application logic to how the view is rendered.</p><p>src/app/hero-list.component.html (structural)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><a href="https://angular.io/guide/displaying-data#ngFor"><code>*ngFor</code></a> is an iterative; it tells Angular to stamp out one <code>&lt;li&gt;</code> per hero in the <code>heroes</code> list.</li><li><a href="https://angular.io/guide/displaying-data#ngIf"><code>*ngIf</code></a> is a conditional; it includes the <code>HeroDetail</code> component only if a selected hero exists.</li></ul><h4 id="Attribute-directives"><a href="#Attribute-directives" class="headerlink" title="Attribute directives"></a>Attribute directives</h4><p><em>Attribute directives</em> alter the appearance or behavior of an existing element. In templates they look like regular HTML attributes, hence the name.</p><p>The <code>ngModel</code> directive, which implements two-way data binding, is an example of an attribute directive. <code>ngModel</code> modifies the behavior of an existing element (typically <code>&lt;input&gt;</code>) by setting its display value property and responding to change events.</p><p>src/app/hero-detail.component.html (ngModel)   &lt;input [(ngModel)]=”hero.name”&gt;`</p><p>Angular has more pre-defined directives that either alter the layout structure (for example, <a href="https://angular.io/guide/built-in-directives#ngSwitch">ngSwitch</a>) or modify aspects of DOM elements and components (for example, <a href="https://angular.io/guide/built-in-directives#ngStyle">ngStyle</a> and <a href="https://angular.io/guide/built-in-directives#ngClass">ngClass</a>).</p><p>Learn more in the <a href="https://angular.io/guide/attribute-directives">Attribute Directives</a> and <a href="https://angular.io/guide/structural-directives">Structural Directives</a> guides.</p><h1 id="Services-and-dependency-injection"><a href="#Services-and-dependency-injection" class="headerlink" title="Services and dependency injection"></a>Services and dependency injection</h1><p><em>Service</em> is a broad category encompassing any value, function, or feature that an app needs. A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.</p><p>Angular distinguishes components from services to increase modularity and reusability. By separating a component’s view-related functionality from other kinds of processing, you can make your component classes lean and efficient.</p><p>Ideally, a component’s job is to enable the user experience and nothing more. A component should present properties and methods for data binding, in order to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a <em>model</em>).</p><p>A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an <em>injectable service class</em>, you make those tasks available to any component. You can also make your app more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</p><p>Angular doesn’t <em>enforce</em> these principles. Angular does help you <em>follow</em> these principles by making it easy to factor your application logic into services and make those services available to components through <em>dependency injection</em>.</p><h2 id="Service-examples"><a href="#Service-examples" class="headerlink" title="Service examples"></a>Service examples</h2><p>Here’s an example of a service class that logs to the browser console.</p><p>src/app/logger.service.ts (class)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">&#123;</span>  <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Services can depend on other services. For example, here’s a <code>HeroService</code> that depends on the <code>Logger</code> service, and also uses <code>BackendService</code> to get heroes. That service in turn might depend on the <code>HttpClient</code> service to fetch heroes asynchronously from a server.</p><p>src/app/hero.service.ts (class)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> heroes<span class="token operator">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> backend<span class="token operator">:</span> BackendService<span class="token punctuation">,</span>    <span class="token keyword">private</span> logger<span class="token operator">:</span> Logger<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  <span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>Hero<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>heroes<span class="token operator">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Fetched </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>heroes<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> heroes.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fill cache</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dependency-injection-DI"><a href="#Dependency-injection-DI" class="headerlink" title="Dependency injection (DI)"></a>Dependency injection (DI)</h2><p><img src="https://angular.io/generated/images/guide/architecture/dependency-injection.png" alt="Service" loading="lazy"></p><p>DI is wired into the Angular framework and used everywhere to provide new components with the services or other things they need. Components consume services; that is, you can <em>inject</em> a service into a component, giving the component access to that service class.</p><p>To define a class as a service in Angular, use the <code>@Injectable()</code> decorator to provide the metadata that allows Angular to inject it into a component as a <em>dependency</em>. Similarly, use the <code>@Injectable()</code> decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) <em>has</em> a dependency.</p><ul><li>The <em>injector</em> is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don’t have to create injectors.</li><li>An injector creates dependencies, and maintains a <em>container</em> of dependency instances that it reuses if possible.</li><li>A <em>provider</em> is an object that tells an injector how to obtain or create a dependency.</li></ul><p>For any dependency that you need in your app, you must register a provider with the app’s injector, so that the injector can use the provider to create new instances. For a service, the provider is typically the service class itself.</p><p>A dependency doesn’t have to be a service—it could be a function, for example, or a value.</p><p>When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types. For example, the constructor of <code>HeroListComponent</code> needs <code>HeroService</code>.</p><p>src/app/hero-list.component.ts (constructor) </p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> service<span class="token operator">:</span> HeroService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn’t yet exist, the injector makes one using the registered provider, and adds it to the injector before returning the service to Angular.</p><p>When all requested services have been resolved and returned, Angular can call the component’s constructor with those services as arguments.</p><p>The process of <code>HeroService</code> injection looks something like this.</p><p><img src="https://angular.io/generated/images/guide/architecture/injector-injects.png" alt="Service" loading="lazy"></p><h3 id="Providing-services"><a href="#Providing-services" class="headerlink" title="Providing services"></a>Providing services</h3><p>You must register at least one <em>provider</em> of any service you are going to use. The provider can be part of the service’s own metadata, making that service available everywhere, or you can register providers with specific modules or components. You register providers in the metadata of the service (in the <code>@Injectable()</code> decorator), or in the <code>@NgModule()</code> or <code>@Component()</code> metadata</p><ul><li><p>By default, the Angular CLI command <a href="https://angular.io/cli/generate"><code>ng generate service</code></a> registers a provider with the root injector for your service by including provider metadata in the <code>@Injectable()</code> decorator. The tutorial uses this method to register the provider of HeroService class definition.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> providedIn<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code> and injects it into any class that asks for it. Registering the provider in the <code>@Injectable()</code> metadata also allows Angular to optimize an app by removing the service from the compiled app if it isn’t used.</p></li><li><p>When you register a provider with a <a href="https://angular.io/guide/architecture-modules">specific NgModule</a>, the same instance of a service is available to all components in that NgModule. To register at this level, use the <code>providers</code> property of the <code>@NgModule()</code> decorator,</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>  BackendService<span class="token punctuation">,</span>  Logger <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>When you register a provider at the component level, you get a new instance of the service with each new instance of that component. At the component level, register a service provider in the <code>providers</code> property of the <code>@Component()</code> metadata.</p><p>src/app/hero-list.component.ts (component providers)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  selector<span class="token operator">:</span>    <span class="token string">'app-hero-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token operator">:</span> <span class="token string">'./hero-list.component.html'</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span>  <span class="token punctuation">[</span> HeroService <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3></li></ul><p>The Angular <code>Router</code> NgModule provides a service that lets you define a navigation path among the different application states and view hierarchies in your app. It is modeled on the familiar browser navigation conventions:</p><ul><li>Enter a URL in the address bar and the browser navigates to a corresponding page.</li><li>Click links on the page and the browser navigates to a new page.</li><li>Click the browser’s back and forward buttons and the browser navigates backward and forward through the history of pages you’ve seen.</li></ul><p>The router maps URL-like paths to views instead of pages. When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser’s behavior, and shows or hides view hierarchies.</p><p>If the router determines that the current application state requires particular functionality, and the module that defines it hasn’t been loaded, the router can <em>lazy-load</em> the module on demand.</p><p>The router interprets a link URL according to your app’s view navigation rules and data state. You can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source. The router logs activity in the browser’s history, so the back and forward buttons work as well.</p><p>To define navigation rules, you associate <em>navigation paths</em> with your components. A path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data. You can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;&lt;p&gt;To use the Angular framewo</summary>
      
    
    
    
    
    <category term="Angular" scheme="http://wangzt568.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://wangzt568.github.io/2020/08/17/TypeScript/"/>
    <id>http://wangzt568.github.io/2020/08/17/TypeScript/</id>
    <published>2020-08-17T14:42:28.000Z</published>
    <updated>2020-08-17T14:45:12.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TypeScript-for-the-New-Programmer"><a href="#TypeScript-for-the-New-Programmer" class="headerlink" title="TypeScript for the New Programmer"></a>TypeScript for the New Programmer</h2><p>Congratulations on choosing TypeScript as one of your first languages — you’re already making good decisions!</p><p>You’ve probably already heard that TypeScript is a “flavor” or “variant” of JavaScript. The relationship between TypeScript (TS) and JavaScript (JS) is rather unique among modern programming languages, so learning more about this relationship will help you understand how TypeScript adds to JavaScript.<a id="more"></a></p><h2 id="What-is-JavaScript-A-Brief-History"><a href="#What-is-JavaScript-A-Brief-History" class="headerlink" title="What is JavaScript? A Brief History"></a>What is JavaScript? A Brief History</h2><p>JavaScript (also known as ECMAScript) started its life as a simple scripting language for browsers. At the time it was invented, it was expected to be used for short snippets of code embedded in a web page — writing more than a few dozen lines of code would have been somewhat unusual. Due to this, early web browsers executed such code pretty slowly. Over time, though, JS became more and more popular, and web developers started using it to create interactive experiences.</p><p>Web browser developers responded to this increased JS usage by optimizing their execution engines (dynamic compilation) and extending what could be done with it (adding APIs), which in turn made web developers use it even more. On modern websites, your browser is frequently running applications that span hundreds of thousands of lines of code. This is long and gradual growth of “the web”, starting as a simple network of static pages, and evolving into a platform for rich <em>applications</em> of all kinds.</p><p>More than this, JS has become popular enough to be used outside the context of browsers, such as implementing JS servers using node.js. The “run anywhere” nature of JS makes it an attractive choice for cross-platform development. There are many developers these days that use <em>only</em> JavaScript to program their entire stack!</p><p>To summarize, we have a language that was designed for quick uses, and then grew to a full-fledged tool to write applications with millions of lines. Every language has its own <em>quirks</em> — oddities and surprises, and JavaScript’s humble beginning makes it have <em>many</em> of these. Some examples:</p><ul><li><p>JavaScript’s equality operator (<code>==</code>) <em>coerces</em> its arguments, leading to unexpected behavior:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// It is! But why??</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// True for *any* value of x!</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JavaScript also allows accessing properties which aren’t present:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> width<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Why is this NaN? Spelling is hard!</span><span class="token keyword">const</span> area <span class="token operator">=</span> obj<span class="token punctuation">.</span>width <span class="token operator">*</span> obj<span class="token punctuation">.</span>heigth<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Most programming languages would throw an error when these sorts of errors occur, some would do so during compilation — before any code is running. When writing small programs, such quirks are annoying but manageable; when writing applications with hundreds or thousands of lines of code, these constant surprises are a serious problem.</p></li></ul><h2 id="TypeScript-A-Static-Type-Checker"><a href="#TypeScript-A-Static-Type-Checker" class="headerlink" title="TypeScript: A Static Type Checker"></a>TypeScript: A Static Type Checker</h2><p>We said earlier that some languages wouldn’t allow those buggy programs to run at all. Detecting errors in code without running it is referred to as <em>static checking</em>. Determining what’s an error and what’s not based on the kinds of values being operated on is known as static <em>type</em> checking.</p><p>TypeScript checks a program for errors before execution, and does so based on the <em>kinds of values</em>, it’s a <em>static type checker</em>. For example, the last example above has an error because of the <em>type</em> of <code>obj</code>. Here’s the error TypeScript found:</p><pre class="line-numbers language-none"><code class="language-none">const obj &#x3D; &#123; width: 10, height: 15 &#125;;const area &#x3D; obj.width * obj.heigth;Property &#39;heigth&#39; does not exist on type &#39;&#123; width: number; height: number; &#125;&#39;. Did you mean &#39;height&#39;?Property &#39;heigth&#39; does not exist on type &#39;&#123; width: number; height: number; &#125;&#39;. Did you mean &#39;height&#39;?Try<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="A-Typed-Superset-of-JavaScript"><a href="#A-Typed-Superset-of-JavaScript" class="headerlink" title="A Typed Superset of JavaScript"></a>A Typed Superset of JavaScript</h3><p>How does TypeScript relate to JavaScript, though?</p><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p>TypeScript is a language that is a <em>superset</em> of JavaScript: JS syntax is therefore legal TS. Syntax refers to the way we write text to form a program. For example, this code has a <em>syntax</em> error because it’s missing a <code>)</code>:</p><pre class="line-numbers language-none"><code class="language-none">let a &#x3D; (4&#39;)&#39; expected.&#39;)&#39; expected.Try<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>TypeScript doesn’t consider any JavaScript code to be an error because of its syntax. This means you can take any working JavaScript code and put it in a TypeScript file without worrying about exactly how it is written.</p><h4 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h4><p>However, TypeScript is a <em>typed</em> superset, meaning that it adds rules about how different kinds of values can be used. The earlier error about <code>obj.heigth</code> was not a <em>syntax</em> error: it is an error of using some kind of value (a <em>type</em>) in an incorrect way.</p><p>As another example, this is JavaScript code that you can run in your browser, and it <em>will</em> print a value:</p><pre class="line-numbers language-none"><code class="language-none">console.log(4 &#x2F; []);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This syntactically-legal program prints <code>Infinity</code>. TypeScript, though, considers division of number by an array to be a nonsensical operation, and will issue an error:</p><pre class="line-numbers language-none"><code class="language-none">console.log(4 &#x2F; []);The right-hand side of an arithmetic operation must be of type &#39;any&#39;, &#39;number&#39;, &#39;bigint&#39; or an enum type.The right-hand side of an arithmetic operation must be of type &#39;any&#39;, &#39;number&#39;, &#39;bigint&#39; or an enum type.Try<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>It’s possible you really <em>did</em> intend to divide a number by an array, perhaps just to see what happens, but most of the time, though, this is a programming mistake. TypeScript’s type checker is designed to allow correct programs through while still catching as many common errors as possible. (Later, we’ll learn about settings you can use to configure how strictly TypeScript checks your code.)</p><p>If you move some code from a JavaScript file to a TypeScript file, you might see <em>type errors</em> depending on how the code is written. These may be legitimate problems with the code, or TypeScript being overly conservative. Throughout this guide we’ll demonstrate how to add various TypeScript syntax to eliminate such errors.</p><h4 id="Runtime-Behavior"><a href="#Runtime-Behavior" class="headerlink" title="Runtime Behavior"></a>Runtime Behavior</h4><p>TypeScript is also a programming language that preserves the <em>runtime behavior</em> of JavaScript. For example, dividing by zero in JavaScript produces <code>Infinity</code> instead of throwing a runtime exception. As a principle, TypeScript <strong>never</strong> changes the runtime behavior of JavaScript code.</p><p>This means that if you move code from JavaScript to TypeScript, it is <strong>guaranteed</strong> to run the same way, even if TypeScript thinks that the code has type errors.</p><p>Keeping the same runtime behavior as JavaScript is a foundational promise of TypeScript because it means you can easily transition between the two languages without worrying about subtle differences that might make your program stop working.</p><h4 id="Erased-Types"><a href="#Erased-Types" class="headerlink" title="Erased Types"></a>Erased Types</h4><p>Roughly speaking, once TypeScript’s compiler is done with checking your code, it <em>erases</em> the types to produce the resulting “compiled” code. This means that once your code is compiled, the resulting plain JS code has no type information.</p><p>This also means that TypeScript never changes the <em>behavior</em> of your program based on the types it inferred. The bottom line is that while you might see type errors during compilation, the type system itself has no bearing on how your program works when it runs.</p><p>Finally, TypeScript doesn’t provide any additional runtime libraries. Your programs will use the same standard library (or external libraries) as JavaScript programs, so there’s no additional TypeScript-specific framework to learn.</p><h2 id="Learning-JavaScript-and-TypeScript"><a href="#Learning-JavaScript-and-TypeScript" class="headerlink" title="Learning JavaScript and TypeScript"></a>Learning JavaScript and TypeScript</h2><p>We frequently see the question “Should I learn JavaScript or TypeScript?“.</p><p>The answer is that you can’t learn TypeScript without learning JavaScript! TypeScript shares syntax and runtime behavior with JavaScript, so anything you learn about JavaScript is helping you learn TypeScript at the same time.</p><p>There are many, many resources available for programmers to learn JavaScript; you should <em>not</em> ignore these resources if you’re writing TypeScript. For example, there about 20 times more StackOverflow questions tagged <code>javascript</code> than <code>typescript</code>, but <em>all</em> of the <code>javascript</code> questions also apply to TypeScript.</p><p>If you find yourself searching for something like “how to sort a list in TypeScript”, remember: <strong>TypeScript is JavaScript’s runtime with a compile-time type checker</strong>. The way you sort a list in TypeScript is the same way you do so in JavaScript. If you find a resource that uses TypeScript directly, that’s great too, but don’t limit yourself to thinking you need TypeScript-specific answers for everyday questions about how to accomplish runtime tasks.</p><hr><p>From here, we’d recommend learning some of the JavaScript fundamentals (the <a href="https://developer.mozilla.org/docs/Web/JavaScript/Guide">JavaScript guide at the Mozilla Web Docs</a> is a good starting point.)</p><p>Once you’re feeling comfortable, you can come back to read <a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html">TypeScript for JavaScript Programmers</a>, then start on <a href="https://www.typescriptlang.org/docs/handbook/intro.html">the handbook</a> or explore the <a href="https://www.typescriptlang.org/play#show-examples">Playground examples</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TypeScript-for-the-New-Programmer&quot;&gt;&lt;a href=&quot;#TypeScript-for-the-New-Programmer&quot; class=&quot;headerlink&quot; title=&quot;TypeScript for the New Programmer&quot;&gt;&lt;/a&gt;TypeScript for the New Programmer&lt;/h2&gt;&lt;p&gt;Congratulations on choosing TypeScript as one of your first languages — you’re already making good decisions!&lt;/p&gt;
&lt;p&gt;You’ve probably already heard that TypeScript is a “flavor” or “variant” of JavaScript. The relationship between TypeScript (TS) and JavaScript (JS) is rather unique among modern programming languages, so learning more about this relationship will help you understand how TypeScript adds to JavaScript.</summary>
    
    
    
    
    <category term="TypeScript" scheme="http://wangzt568.github.io/tags/TypeScript/"/>
    
    <category term="Frontend" scheme="http://wangzt568.github.io/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot with H2/MySQL</title>
    <link href="http://wangzt568.github.io/2020/08/16/Spring-Boot-with-H2-MySQL/"/>
    <id>http://wangzt568.github.io/2020/08/16/Spring-Boot-with-H2-MySQL/</id>
    <published>2020-08-16T23:44:23.000Z</published>
    <updated>2020-08-16T23:54:30.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Boot-amp-H2"><a href="#Spring-Boot-amp-H2" class="headerlink" title="Spring Boot&amp;H2"></a>Spring Boot&amp;H2</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>By default, Spring Boot configures the application to <strong>connect to an in-memory store with the username *sa* and an empty password</strong>. However, we can change those parameters by adding the following properties to the <em>application.properties</em> file:</p><pre class="line-numbers language-plaintext" data-language="plaintext"><code class="language-plaintext">spring.datasource.url&#x3D;jdbc:h2:mem:testdbspring.datasource.driverClassName&#x3D;org.h2.Driverspring.datasource.username&#x3D;saspring.datasource.password&#x3D;passwordspring.jpa.database-platform&#x3D;org.hibernate.dialect.H2Dialect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By design, the in-memory database is volatile and data will be lost when we restart the application.</p><p>We can change that behavior by using file-based storage. To do this we need to update the <em>spring.datasource.url:</em></p><pre class="line-numbers language-plaintext" data-language="plaintext"><code class="language-plaintext">spring.datasource.url&#x3D;jdbc:h2:file:&#x2F;data&#x2F;demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The database can also <a href="http://www.h2database.com/html/features.html#connection_modes">operate in other modes</a>.</p><p>开启console</p><pre class="line-numbers language-none"><code class="language-none">spring.h2.console.enabled&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-plaintext" data-language="plaintext"><code class="language-plaintext">spring.h2.console.path&#x3D;&#x2F;h2-consolespring.h2.console.settings.trace&#x3D;falsespring.h2.console.settings.web-allow-others&#x3D;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>In the snippet above, we set the console path to be <em>/h2-console</em> which is relative to the address and port of our running application. Therefore if our app is running at <em><a href="http://localhost:9001/">http://localhost:9001</a></em> then the console will be available at <em><a href="http://localhost:9001/h2-console">http://localhost:9001/h2-console</a>.</em></p><p>Furthermore, we set <em>spring.h2.console.settings.trace</em> to <em>false</em> to prevent trace output and we can also disable remote access by setting <em>spring</em>.<em>h2.console.settings.web-allow-others</em> to <em>false</em>.</p><h3 id="Spring-Boot-amp-MySQL"><a href="#Spring-Boot-amp-MySQL" class="headerlink" title="Spring Boot&amp;MySQL"></a>Spring Boot&amp;MySQL</h3><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">update</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://$&#123;MYSQL_HOST:localhost&#125;:3306/users_database?serverTimezone=UTC</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring-Boot-amp-H2&quot;&gt;&lt;a href=&quot;#Spring-Boot-amp-H2&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot&amp;amp;H2&quot;&gt;&lt;/a&gt;Spring Boot&amp;amp;H2&lt;/h3&gt;&lt;h4 id=&quot;依</summary>
      
    
    
    
    <category term="Spring" scheme="http://wangzt568.github.io/categories/Spring/"/>
    
    
    <category term="SpringBoot" scheme="http://wangzt568.github.io/tags/SpringBoot/"/>
    
    <category term="database" scheme="http://wangzt568.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf with spring</title>
    <link href="http://wangzt568.github.io/2020/08/06/Thymeleaf-with-spring/"/>
    <id>http://wangzt568.github.io/2020/08/06/Thymeleaf-with-spring/</id>
    <published>2020-08-06T14:40:39.000Z</published>
    <updated>2020-08-06T14:50:10.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="how-to-add-an-input-to-our-form"><a href="#how-to-add-an-input-to-our-form" class="headerlink" title="how to add an input to our form"></a>how to add an input to our form</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;datePlanted&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>As you can see, we are introducing a new attribute here: <code>th:field.</code> This is a very important feature for Spring MVC integration because it does all the heavy work of binding your input with a property in the form-backing bean. You can see it as an equivalent of the path attribute in a tag from Spring MVC’s JSP tag library.</p><p>The <code>th:field</code> attribute behaves differently depending on whether it is attached to an <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> or <code>&lt;textarea&gt;</code> tag (and also depending on the specific type of <code>&lt;input&gt;</code> tag). In this case (<code>input[type=text]</code>), the above line of code is similar to:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datePlanted<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datePlanted<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;datePlanted&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>…but in fact it is a little bit more than that, because <code>th:field</code> will also apply the registered Spring Conversion Service, including the <code>DateFormatter</code> we saw before (even if the field expression is not double-bracketed). Thanks to this, the date will be shown correctly formatted.</p><p>Values for <code>th:field</code> attributes must be selection expressions (<code>*&#123;...&#125;</code>), which makes sense given the fact that they will be evaluated on the form-backing bean and not on the context variables (or model attributes in Spring MVC jargon).</p><p>Contrary to the ones in <code>th:object</code>, these expressions can include property navigation (in fact any expression allowed for the path attribute of a <code>&lt;form:input&gt;</code> JSP tag will be allowed here).</p><p>Note that <code>th:field</code> also understands the new types of <code>&lt;input&gt;</code> element introduced by HTML5 like <code>&lt;input type=&quot;datetime&quot; ... /&gt;</code>, <code>&lt;input type=&quot;color&quot; ... /&gt;</code>, etc., effectively adding complete HTML5 support to Spring MVC.</p><h3 id="Validation-and-Error-Messages"><a href="#Validation-and-Error-Messages" class="headerlink" title="Validation and Error Messages"></a>Validation and Error Messages</h3><p>Let’s see how we could set a specific CSS class to a field if it has an error:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;datePlanted&#125;<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>datePlanted<span class="token punctuation">'</span>)&#125;? fieldError<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>As you can see, the <code>#fields.hasErrors(...)</code> function receives the field expression as a parameter (<code>datePlanted</code>), and returns a boolean telling whether any validation errors exist for that field.</p><p>We could also obtain all the errors for that field and iterate them:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err : $&#123;#fields.errors(<span class="token punctuation">'</span>datePlanted<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;err&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Instead of iterating, we could have also used <code>th:errors</code>, a specialized attribute which builds a list with all the errors for the specified selector, separated by <code>&lt;br /&gt;</code>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;datePlanted&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>datePlanted<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;datePlanted&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Incorrect date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Simplifying-error-based-CSS-styling-th-errorclass"><a href="#Simplifying-error-based-CSS-styling-th-errorclass" class="headerlink" title="Simplifying error-based CSS styling: th:errorclass"></a>Simplifying error-based CSS styling: <code>th:errorclass</code></h4><p>The example we saw above, <em>setting a CSS class to a form input if that field has errors</em>, is so common that Thymeleaf offers a specific attribute for doing exacly that: <code>th:errorclass</code>.</p><p>Applied to a form field tag (input, select, textarea…), it will read the name of the field to be examined from any existing <code>name</code> or <code>th:field</code> attributes in the same tag, and then append the specified CSS class to the tag if such field has any associated errors:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;datePlanted&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>errorclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fieldError<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If <code>datePlanted</code> has errors, this will render as:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datePlanted<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datePlanted<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2013-01-01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small fieldError<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-2-All-errors"><a href="#8-2-All-errors" class="headerlink" title="8.2 All errors"></a>8.2 All errors</h4><p>And what if we want to show all the errors in the form? We just need to query the <code>#fields.hasErrors(...)</code> and <code>#fields.errors(...)</code> methods with the <code>&#39;*&#39;</code> or <code>&#39;all&#39;</code> constants (which are equivalent):</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>*<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err : $&#123;#fields.errors(<span class="token punctuation">'</span>*<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;err&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Input is incorrect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>As in the examples above, we could obtain all the errors and iterate them…</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err : $&#123;#fields.errors(<span class="token punctuation">'</span>*<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;err&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>…as well as build a <code>&lt;br /&gt;</code>-separated list:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>all<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;all&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Incorrect date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Finally. Note <code>#fields.hasErrors(&#39;*&#39;)</code> is equivalent to <code>#fields.hasAnyErrors()</code> and <code>#fields.errors(&#39;*&#39;)</code> is equivalent to <code>#fields.allErrors()</code>. Use whichever syntax you prefer:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasAnyErrors()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err : $&#123;#fields.allErrors()&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;err&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-3-Global-errors"><a href="#8-3-Global-errors" class="headerlink" title="8.3 Global errors"></a>8.3 Global errors</h4><p>There is a third type of error in a Spring form: <em>global</em> errors. These are errors that are not associated with any specific fields in the form, but still exist.</p><p>Thymeleaf offers the <code>global</code> constant for accessing these errors:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>global<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err : $&#123;#fields.errors(<span class="token punctuation">'</span>global<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;err&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Input is incorrect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>global<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;global&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Incorrect date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>…as well as equivalent <code>#fields.hasGlobalErrors()</code> and <code>#fields.globalErrors()</code> convenience methods:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasGlobalErrors()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err : $&#123;#fields.globalErrors()&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;err&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-4-Displaying-errors-outside-forms"><a href="#8-4-Displaying-errors-outside-forms" class="headerlink" title="8.4 Displaying errors outside forms"></a>8.4 Displaying errors outside forms</h4><p>Form validation errors can also be displayed outside forms by using variable (<code>$&#123;...&#125;</code>) instead of selection (<code>*&#123;...&#125;</code>) expressions and prefixing the name of the form-backing bean:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myForm&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myForm.date&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>errors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myForm.*&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>$&#123;myForm&#125;<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>$&#123;myForm.date&#125;<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#fields.hasErrors(<span class="token punctuation">'</span>$&#123;myForm.*&#125;<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myForm&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-5-Rich-error-objects"><a href="#8-5-Rich-error-objects" class="headerlink" title="8.5 Rich error objects"></a>8.5 Rich error objects</h4><p>Thymeleaf offers the possibility to obtain form error information in the form of beans (instead of mere <em>strings</em>), with the <code>fieldName</code> (String), <code>message</code> (String) and <code>global</code> (boolean) attributes.</p><p>These errors can be obtained by means of the <code>#fields.detailedErrors()</code> utility method:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e : $&#123;#fields.detailedErrors()&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;e.global&#125;? globalerr : fielderr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;e.global&#125;? <span class="token punctuation">'</span>*<span class="token punctuation">'</span> : $&#123;e.fieldName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>The field name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> |        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;e.message&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>The error message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;how-to-add-an-input-to-our-form&quot;&gt;&lt;a href=&quot;#how-to-add-an-input-to-our-form&quot; class=&quot;headerlink&quot; title=&quot;how to add an input to our for</summary>
      
    
    
    
    <category term="Frontend" scheme="http://wangzt568.github.io/categories/Frontend/"/>
    
    <category term="Thymeleaf" scheme="http://wangzt568.github.io/categories/Frontend/Thymeleaf/"/>
    
    
    <category term="Thymeleaf" scheme="http://wangzt568.github.io/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Tutorial</title>
    <link href="http://wangzt568.github.io/2020/08/03/Java8-Tutorial/"/>
    <id>http://wangzt568.github.io/2020/08/03/Java8-Tutorial/</id>
    <published>2020-08-04T02:25:59.000Z</published>
    <updated>2020-08-04T02:36:04.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><h2 id="Default-Methods-for-Interfaces"><a href="#Default-Methods-for-Interfaces" class="headerlink" title="Default Methods for Interfaces"></a>Default Methods for Interfaces</h2><p>Java 8 enables us to add non-abstract method implementations to interfaces by utilizing the <code>default</code> keyword. This feature is also known as <a href="http://stackoverflow.com/a/24102730">virtual extension methods</a>.</p><p>Here is our first example:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Formula</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Besides the abstract method <code>calculate</code> the interface <code>Formula</code> also defines the default method <code>sqrt</code>. Concrete classes only have to implement the abstract method <code>calculate</code>. The default method <code>sqrt</code> can be used out of the box.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Formula</span> formula <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Formula</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>formula<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 100.0</span>formula<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 4.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The formula is implemented as an anonymous object. The code is quite verbose: 6 lines of code for such a simple calculation of <code>sqrt(a * 100)</code>. As we’ll see in the next section, there’s a much nicer way of implementing single method objects in Java 8.</p><h2 id="Lambda-expressions"><a href="#Lambda-expressions" class="headerlink" title="Lambda expressions"></a>Lambda expressions</h2><p>Let’s start with a simple example of how to sort a list of strings in prior versions of Java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token string">"anna"</span><span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">,</span> <span class="token string">"xenia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The static utility method <code>Collections.sort</code> accepts a list and a comparator in order to sort the elements of the given list. You often find yourself creating anonymous comparators and pass them to the sort method.</p><p>Instead of creating anonymous objects all day long, Java 8 comes with a much shorter syntax, <strong>lambda expressions</strong>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>As you can see the code is much shorter and easier to read. But it gets even shorter:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>For one line method bodies you can skip both the braces <code>&#123;&#125;</code> and the <code>return</code> keyword. But it gets even shorter:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">names<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>List now has a <code>sort</code> method. Also the java compiler is aware of the parameter types so you can skip them as well. Let’s dive deeper into how lambda expressions can be used in the wild.</p><h2 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h2><p>How does lambda expressions fit into Java’s type system? Each lambda corresponds to a given type, specified by an interface. A so called <em>functional interface</em> must contain <strong>exactly one abstract method</strong> declaration. Each lambda expression of that type will be matched to this abstract method. Since default methods are not abstract you’re free to add default methods to your functional interface.</p><p>We can use arbitrary interfaces as lambda expressions as long as the interface only contains one abstract method. To ensure that your interface meet the requirements, you should add the <code>@FunctionalInterface</code> annotation. The compiler is aware of this annotation and throws a compiler error as soon as you try to add a second abstract method declaration to the interface.</p><p>Example:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">F</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> converter <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Keep in mind that the code is also valid if the <code>@FunctionalInterface</code> annotation would be omitted.</p><h2 id="Method-and-Constructor-References"><a href="#Method-and-Constructor-References" class="headerlink" title="Method and Constructor References"></a>Method and Constructor References</h2><p>The above example code can be further simplified by utilizing static method references:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> converter <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Java 8 enables you to pass references of methods or constructors via the <code>::</code> keyword. The above example shows how to reference a static method. But we can also reference object methods:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Something</span> something <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> converter <span class="token operator">=</span> something<span class="token operator">::</span><span class="token function">startsWith</span><span class="token punctuation">;</span><span class="token class-name">String</span> converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "J"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Let’s see how the <code>::</code> keyword works for constructors. First we define an example class with different constructors:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next we specify a person factory interface to be used for creating new persons:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">PersonFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">P</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Instead of implementing the factory manually, we glue everything together via constructor references:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PersonFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personFactory <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> personFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token string">"Parker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>We create a reference to the Person constructor via <code>Person::new</code>. The Java compiler automatically chooses the right constructor by matching the signature of <code>PersonFactory.create</code>.</p><h2 id="Lambda-Scopes"><a href="#Lambda-Scopes" class="headerlink" title="Lambda Scopes"></a>Lambda Scopes</h2><p>Accessing outer scope variables from lambda expressions is very similar to anonymous objects. You can access final variables from the local outer scope as well as instance fields and static variables.</p><h3 id="Accessing-local-variables"><a href="#Accessing-local-variables" class="headerlink" title="Accessing local variables"></a>Accessing local variables</h3><p>We can read final local variables from the outer scope of lambda expressions:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But different to anonymous objects the variable <code>num</code> does not have to be declared final. This code is also valid:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>However <code>num</code> must be implicitly final for the code to compile. The following code does <strong>not</strong> compile:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Writing to <code>num</code> from within the lambda expression is also prohibited.</p><h3 id="Accessing-fields-and-static-variables"><a href="#Accessing-fields-and-static-variables" class="headerlink" title="Accessing fields and static variables"></a>Accessing fields and static variables</h3><p>In contrast to local variables, we have both read and write access to instance fields and static variables from within lambda expressions. This behaviour is well known from anonymous objects.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Lambda4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> outerStaticNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> outerNum<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">testScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter1 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            outerNum <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter2 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            outerStaticNum <span class="token operator">=</span> <span class="token number">72</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Accessing-Default-Interface-Methods"><a href="#Accessing-Default-Interface-Methods" class="headerlink" title="Accessing Default Interface Methods"></a>Accessing Default Interface Methods</h3><p>Remember the formula example from the first section? Interface <code>Formula</code> defines a default method <code>sqrt</code> which can be accessed from each formula instance including anonymous objects. This does not work with lambda expressions.</p><p>Default methods <strong>cannot</strong> be accessed from within lambda expressions. The following code does not compile:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Formula</span> formula <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Built-in-Functional-Interfaces"><a href="#Built-in-Functional-Interfaces" class="headerlink" title="Built-in Functional Interfaces"></a>Built-in Functional Interfaces</h2><p>The JDK 1.8 API contains many built-in functional interfaces. Some of them are well known from older versions of Java like <code>Comparator</code> or <code>Runnable</code>. Those existing interfaces are extended to enable Lambda support via the <code>@FunctionalInterface</code> annotation.</p><p>But the Java 8 API is also full of new functional interfaces to make your life easier. Some of those new interfaces are well known from the <a href="https://code.google.com/p/guava-libraries/">Google Guava</a> library. Even if you’re familiar with this library you should keep a close eye on how those interfaces are extended by some useful method extensions.</p><h3 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h3><p>Predicates are boolean-valued functions of one argument. The interface contains various default methods for composing predicates to complex logical terms (and, or, negate)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// true</span>predicate<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> nonNull <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">nonNull</span><span class="token punctuation">;</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> isNull <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span><span class="token punctuation">;</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> isEmpty <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">isEmpty</span><span class="token punctuation">;</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> isNotEmpty <span class="token operator">=</span> isEmpty<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>Functions accept one argument and produce a result. Default methods can be used to chain multiple functions together (compose, andThen).</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> toInteger <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> backToString <span class="token operator">=</span> toInteger<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>backToString<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "123"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Suppliers"><a href="#Suppliers" class="headerlink" title="Suppliers"></a>Suppliers</h3><p>Suppliers produce a result of a given generic type. Unlike Functions, Suppliers don’t accept arguments.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personSupplier <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>personSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// new Person</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h3><p>Consumers represent operations to be performed on a single input argument.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> greeter <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>greeter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Luke"</span><span class="token punctuation">,</span> <span class="token string">"Skywalker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h3><p>Comparators are well known from older versions of Java. Java 8 adds various default methods to the interface.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-></span> p1<span class="token punctuation">.</span>firstName<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Wonderland"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// > 0</span>comparator<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &lt; 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h2><p>Optionals are not functional interfaces, but nifty utilities to prevent <code>NullPointerException</code>. It’s an important concept for the next section, so let’s have a quick look at how Optionals work.</p><p>Optional is a simple container for a value which may be null or non-null. Think of a method which may return a non-null result but sometimes return nothing. Instead of returning <code>null</code> you return an <code>Optional</code> in Java 8.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "b"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h2><p>A <code>java.util.Stream</code> represents a sequence of elements on which one or more operations can be performed. Stream operations are either <em>intermediate</em> or <em>terminal</em>. While terminal operations return a result of a certain type, intermediate operations return the stream itself so you can chain multiple method calls in a row. Streams are created on a source, e.g. a <code>java.util.Collection</code> like lists or sets (maps are not supported). Stream operations can either be executed sequentially or parallely.</p><blockquote><p>Streams are extremely powerful, so I wrote a separate <a href="http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/">Java 8 Streams Tutorial</a>. <strong>You should also check out <a href="https://github.com/winterbe/sequency">Sequency</a> as a similiar library for the web.</strong></p></blockquote><p>Let’s first look how sequential streams work. First we create a sample source in form of a list of strings:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Collections in Java 8 are extended so you can simply create streams either by calling <code>Collection.stream()</code> or <code>Collection.parallelStream()</code>. The following sections explain the most common stream operations.</p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Filter accepts a predicate to filter all elements of the stream. This operation is <em>intermediate</em> which enables us to call another stream operation (<code>forEach</code>) on the result. ForEach accepts a consumer to be executed for each element in the filtered stream. ForEach is a terminal operation. It’s <code>void</code>, so we cannot call another stream operation.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "aaa2", "aaa1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sorted"><a href="#Sorted" class="headerlink" title="Sorted"></a>Sorted</h3><p>Sorted is an <em>intermediate</em> operation which returns a sorted view of the stream. The elements are sorted in natural order unless you pass a custom <code>Comparator</code>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "aaa1", "aaa2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Keep in mind that <code>sorted</code> does only create a sorted view of the stream without manipulating the ordering of the backed collection. The ordering of <code>stringCollection</code> is untouched:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringCollection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>The <em>intermediate</em> operation <code>map</code> converts each element into another object via the given function. The following example converts each string into an upper-cased string. But you can also use <code>map</code> to transform each object into another type. The generic type of the resulting stream depends on the generic type of the function you pass to <code>map</code>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h3><p>Various matching operations can be used to check whether a certain predicate matches the stream. All of those operations are <em>terminal</em> and return a boolean result.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span><span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span><span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneStartsWithZ<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h4><p>Count is a <em>terminal</em> operation returning the number of elements in the stream as a <code>long</code>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> startsWithB <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>startsWithB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><p>This <em>terminal</em> operation performs a reduction on the elements of the stream with the given function. The result is an <code>Optional</code> holding the reduced value.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> reduced <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1 <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>reduced<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Parallel-Streams"><a href="#Parallel-Streams" class="headerlink" title="Parallel Streams"></a>Parallel Streams</h2><p>As mentioned above streams can be either sequential or parallel. Operations on sequential streams are performed on a single thread while operations on parallel streams are performed concurrently on multiple threads.</p><p>The following example demonstrates how easy it is to increase the performance by using parallel streams.</p><p>First we create a large list of unique elements:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UUID</span> uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now we measure the time it takes to sort a stream of this collection.</p><h3 id="Sequential-Sort"><a href="#Sequential-Sort" class="headerlink" title="Sequential Sort"></a>Sequential Sort</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sequential sort took: %d ms"</span><span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sequential sort took: 899 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Parallel-Sort"><a href="#Parallel-Sort" class="headerlink" title="Parallel Sort"></a>Parallel Sort</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"parallel sort took: %d ms"</span><span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// parallel sort took: 472 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As you can see both code snippets are almost identical but the parallel sort is roughly 50% faster. All you have to do is change <code>stream()</code> to <code>parallelStream()</code>.</p><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>As already mentioned maps do not directly support streams. There’s no <code>stream()</code> method available on the <code>Map</code> interface itself, however you can create specialized streams upon the keys, values or entries of a map via <code>map.keySet().stream()</code>, <code>map.values().stream()</code> and <code>map.entrySet().stream()</code>.</p><p>Furthermore maps support various new and useful methods for doing common tasks.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"val"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The above code should be self-explaining: <code>putIfAbsent</code> prevents us from writing additional if null checks; <code>forEach</code> accepts a consumer to perform operations for each value of the map.</p><p>This example shows how to compute code on the map by utilizing functions:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-></span> val <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// val33</span>map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span>map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> num <span class="token operator">-></span> <span class="token string">"val"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> num <span class="token operator">-></span> <span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// val33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next, we learn how to remove entries for a given key, only if it’s currently mapped to a given value:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"val3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// val33</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"val33"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Another helpful method:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// not found</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Merging entries of a map is quite easy:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"val9"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-></span> value<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// val9</span>map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"concat"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-></span> value<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// val9concat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Merge either put the key/value into the map if no entry for the key exists, or the merging function will be called to change the existing value.</p><h2 id="Date-API"><a href="#Date-API" class="headerlink" title="Date API"></a>Date API</h2><p>Java 8 contains a brand new date and time API under the package <code>java.time</code>. The new Date API is comparable with the <a href="http://www.joda.org/joda-time/">Joda-Time</a> library, however it’s <a href="http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html">not the same</a>. The following examples cover the most important parts of this new API.</p><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>Clock provides access to the current date and time. Clocks are aware of a timezone and may be used instead of <code>System.currentTimeMillis()</code> to retrieve the current time in milliseconds since Unix EPOCH. Such an instantaneous point on the time-line is also represented by the class <code>Instant</code>. Instants can be used to create legacy <code>java.util.Date</code> objects.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Clock</span> clock <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Instant</span> instant <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> legacyDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// legacy java.util.Date</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Timezones"><a href="#Timezones" class="headerlink" title="Timezones"></a>Timezones</h3><p>Timezones are represented by a <code>ZoneId</code>. They can easily be accessed via static factory methods. Timezones define the offsets which are important to convert between instants and local dates and times.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// prints all available timezone ids</span><span class="token class-name">ZoneId</span> zone1 <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZoneId</span> zone2 <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Brazil/East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zone1<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zone2<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ZoneRules[currentStandardOffset=+01:00]</span><span class="token comment">// ZoneRules[currentStandardOffset=-03:00]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h3><p>LocalTime represents a time without a timezone, e.g. 10pm or 17:30:15. The following example creates two local times for the timezones defined above. Then we compare both times and calculate the difference in hours and minutes between both times.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalTime</span> now1 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> now2 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span><span class="token keyword">long</span> hoursBetween <span class="token operator">=</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span>HOURS<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> minutesBetween <span class="token operator">=</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hoursBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// -3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minutesBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// -239</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LocalTime comes with various factory methods to simplify the creation of new instances, including parsing of time strings.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalTime</span> late <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>late<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 23:59:59</span><span class="token class-name">DateTimeFormatter</span> germanFormatter <span class="token operator">=</span>    <span class="token class-name">DateTimeFormatter</span>        <span class="token punctuation">.</span><span class="token function">ofLocalizedTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>SHORT<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span>GERMAN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> leetTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"13:37"</span><span class="token punctuation">,</span> germanFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leetTime<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 13:37</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><p>LocalDate represents a distinct date, e.g. 2014-03-11. It’s immutable and works exactly analog to LocalTime. The sample demonstrates how to calculate new dates by adding or subtracting days, months or years. Keep in mind that each manipulation returns a new instance.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> tomorrow <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> yesterday <span class="token operator">=</span> tomorrow<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> independenceDay <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span> <span class="token class-name">Month</span><span class="token punctuation">.</span>JULY<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> independenceDay<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// FRIDAY</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Parsing a LocalDate from a string is just as simple as parsing a LocalTime:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> germanFormatter <span class="token operator">=</span>    <span class="token class-name">DateTimeFormatter</span>        <span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span>GERMAN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> xmas <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"24.12.2014"</span><span class="token punctuation">,</span> germanFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xmas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2014-12-24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p>LocalDateTime represents a date-time. It combines date and time as seen in the above sections into one instance. <code>LocalDateTime</code> is immutable and works similar to LocalTime and LocalDate. We can utilize methods for retrieving certain fields from a date-time:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> sylvester <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span> <span class="token class-name">Month</span><span class="token punctuation">.</span>DECEMBER<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// WEDNESDAY</span><span class="token class-name">Month</span> month <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// DECEMBER</span><span class="token keyword">long</span> minuteOfDay <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token class-name">ChronoField</span><span class="token punctuation">.</span>MINUTE_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minuteOfDay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1439</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With the additional information of a timezone it can be converted to an instant. Instants can easily be converted to legacy dates of type <code>java.util.Date</code>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Instant</span> instant <span class="token operator">=</span> sylvester        <span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> legacyDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>legacyDate<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Wed Dec 31 23:59:59 CET 2014</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Formatting date-times works just like formatting dates or times. Instead of using pre-defined formats we can create formatters from custom patterns.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span>    <span class="token class-name">DateTimeFormatter</span>        <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"MMM dd, yyyy - HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> parsed <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"Nov 03, 2014 - 07:13"</span><span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> string <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Nov 03, 2014 - 07:13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unlike <code>java.text.NumberFormat</code> the new <code>DateTimeFormatter</code> is immutable and <strong>thread-safe</strong>.</p><p>For details on the pattern syntax read <a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html">here</a>.</p><h2 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h2><p>Annotations in Java 8 are repeatable. Let’s dive directly into an example to figure that out.</p><p>First, we define a wrapper annotation which holds an array of the actual annotations:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@interface</span> <span class="token class-name">Hints</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Hint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Hints</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Hint</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java 8 enables us to use multiple annotations of the same type by declaring the annotation <code>@Repeatable</code>.</p><h3 id="Variant-1-Using-the-container-annotation-old-school"><a href="#Variant-1-Using-the-container-annotation-old-school" class="headerlink" title="Variant 1: Using the container annotation (old school)"></a>Variant 1: Using the container annotation (old school)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Hints</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Variant-2-Using-repeatable-annotations-new-school"><a href="#Variant-2-Using-repeatable-annotations-new-school" class="headerlink" title="Variant 2: Using repeatable annotations (new school)"></a>Variant 2: Using repeatable annotations (new school)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint2"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using variant 2 the java compiler implicitly sets up the <code>@Hints</code> annotation under the hood. That’s important for reading annotation information via reflection.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Hint</span> hint <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Hint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// null</span><span class="token class-name">Hints</span> hints1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Hints</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hints1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span><span class="token class-name">Hint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hints2 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span><span class="token class-name">Hint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hints2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Although we never declared the <code>@Hints</code> annotation on the <code>Person</code> class, it’s still readable via <code>getAnnotation(Hints.class)</code>. However, the more convenient method is <code>getAnnotationsByType</code> which grants direct access to all annotated <code>@Hint</code> annotations.</p><p>Furthermore the usage of annotations in Java 8 is expanded to two new targets:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE_PARAMETER<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;h2 id=&quot;Defau</summary>
      
    
    
    
    <category term="Java" scheme="http://wangzt568.github.io/categories/Java/"/>
    
    <category term="Java8" scheme="http://wangzt568.github.io/categories/Java/Java8/"/>
    
    
    <category term="Java" scheme="http://wangzt568.github.io/tags/Java/"/>
    
    <category term="Java8" scheme="http://wangzt568.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>JavaCollections</title>
    <link href="http://wangzt568.github.io/2020/07/26/JavaCollections/"/>
    <id>http://wangzt568.github.io/2020/07/26/JavaCollections/</id>
    <published>2020-07-26T15:44:52.000Z</published>
    <updated>2020-07-26T15:52:26.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaCollections-FrameWork"><a href="#JavaCollections-FrameWork" class="headerlink" title="JavaCollections FrameWork"></a>JavaCollections FrameWork</h3><img src="/img/JavaNote/JavaCollections.png" style="zoom:150%;" / loading="lazy"><p>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 <a href="https://www.runoob.com/java/java-arraylist.html">ArrayList</a>、<a href="https://www.runoob.com/java/java-linkedlist.html">LinkedList</a>、<a href="https://www.runoob.com/java/java-hashset.html">HashSet</a>、LinkedHashSet、<a href="https://www.runoob.com/java/java-hashmap.html">HashMap</a>、LinkedHashMap 等等。</p><p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ul><li><strong>接口：</strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li><li><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</li><li><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</li></ul><p>除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键/值对。尽管 Map 不是集合，但是它们完全整合在集合中。</p><h3 id="如何使用迭代器"><a href="#如何使用迭代器" class="headerlink" title="如何使用迭代器"></a>如何使用迭代器</h3><p>通常情况下，你会希望遍历一个集合中的元素。例如，显示集合中的每个元素。</p><p>一般遍历数组都是采用for循环或者增强for，这两个方法也可以用在集合框架，但是还有一种方法是采用迭代器遍历集合框架，它是一个对象，实现了<a href="https://www.runoob.com/java/java-iterator.html">Iterator</a> 接口或 ListIterator接口。</p><p>迭代器，使你能够通过循环来得到或删除集合的元素。ListIterator 继承了 Iterator，以允许双向遍历列表和修改元素。</p><p>使用迭代器遍历ArrayList和Map</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"HAHAHAHA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//第一种遍历方法使用 For-Each 遍历 List</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//也可以改写 for(int i=0;i&lt;list.size();i++) 这种形式</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>      <span class="token comment">//第二种遍历，把链表变为数组相关的内容进行遍历</span>     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArray<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这里也可以改写为  for(String str:strArray) 这种形式</span>     <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>         <span class="token comment">//第三种遍历 使用迭代器进行相关遍历</span>          <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ite<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>ite<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判断下一个元素之后有值</span>     <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ite<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第一种：普遍使用，二次取值</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.keySet遍历key和value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span><span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token comment">//第二种</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet使用iterator遍历key和value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token comment">//第三种：推荐，尤其是容量大时</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet遍历key和value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>          <span class="token comment">//第四种</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.values()遍历所有的value，但不能遍历key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> v <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value= "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JavaCollections-FrameWork&quot;&gt;&lt;a href=&quot;#JavaCollections-FrameWork&quot; class=&quot;headerlink&quot; title=&quot;JavaCollections FrameWork&quot;&gt;&lt;/a&gt;JavaCollect</summary>
      
    
    
    
    <category term="Java" scheme="http://wangzt568.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://wangzt568.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>25. Reverse Nodes in k-Group</title>
    <link href="http://wangzt568.github.io/2020/07/20/25-Reverse-Nodes-in-k-Group/"/>
    <id>http://wangzt568.github.io/2020/07/20/25-Reverse-Nodes-in-k-Group/</id>
    <published>2020-07-21T03:07:23.000Z</published>
    <updated>2020-07-30T01:15:38.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="25-Reverse-Nodes-in-k-Group"><a href="#25-Reverse-Nodes-in-k-Group" class="headerlink" title="25. Reverse Nodes in k-Group"></a>25. Reverse Nodes in k-Group</h2><h3 id="Description-H"><a href="#Description-H" class="headerlink" title="Description(H):"></a>Description(H):</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode() &#123;&#125; *     ListNode(int val) &#123; this.val = val; &#125; *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//reverseKGroup create pointers: dummy, prev, tail, cur.</span>    <span class="token comment">//dummy: record the head, let dummy.next = head, and never change it, it's our return</span>    <span class="token comment">// prev: connect previous reverse part to the rest part, it's the last node of the previous reverse //part,  connect to the next part that has just been reversed.</span>    <span class="token comment">//tail: before reverse it's a head, after reverse it becomes real tail which is the endnode of //reversed part.</span>    <span class="token comment">//cur: record current location, if cur == null then it's done;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ListNode</span> tail <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token comment">//tail is the first node of the part to be reversed</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> k<span class="token operator">&amp;&amp;</span> cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>              cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//if rest lengh is less than k, then no need to reverse</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//reverse and connect.</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                prev <span class="token operator">=</span> tail<span class="token punctuation">;</span>                <span class="token comment">// before reverse, tail is the head of the reverse list, after reverse tail is real tail, //it becomes the endnode of the list, and that  endnode is going to connect to the next reversed part, so  //prev should moves to the end which is tail.And in next loop tail will become a head of next part.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//reverse k nodes by just reversing the connection.return the head after reversion.</span>    <span class="token comment">//the end is recorded by tail pointer.</span>    <span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>            prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token operator">--</span>k<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity:"></a>Complexity:</h4><blockquote><p>Time: O(n)</p><p>Space: O(1)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;25-Reverse-Nodes-in-k-Group&quot;&gt;&lt;a href=&quot;#25-Reverse-Nodes-in-k-Group&quot; class=&quot;headerlink&quot; title=&quot;25. Reverse Nodes in k-Group&quot;&gt;&lt;/a&gt;25. </summary>
      
    
    
    
    <category term="Leet" scheme="http://wangzt568.github.io/categories/Leet/"/>
    
    <category term="H" scheme="http://wangzt568.github.io/categories/Leet/H/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>SpringJdbc</title>
    <link href="http://wangzt568.github.io/2020/07/19/SpringJdbc/"/>
    <id>http://wangzt568.github.io/2020/07/19/SpringJdbc/</id>
    <published>2020-07-20T01:32:20.000Z</published>
    <updated>2020-08-04T02:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBCTemplage-概念和准备"><a href="#JDBCTemplage-概念和准备" class="headerlink" title="JDBCTemplage(概念和准备)"></a>JDBCTemplage(概念和准备)</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBCTemplage-概念和准备&quot;&gt;&lt;a href=&quot;#JDBCTemplage-概念和准备&quot; class=&quot;headerlink&quot; title=&quot;JDBCTemplage(概念和准备)&quot;&gt;&lt;/a&gt;JDBCTemplage(概念和准备)&lt;/h2&gt;</summary>
      
    
    
    
    <category term="Spg" scheme="http://wangzt568.github.io/categories/Spg/"/>
    
    
    <category term="Spring" scheme="http://wangzt568.github.io/tags/Spring/"/>
    
    <category term="Jdbc" scheme="http://wangzt568.github.io/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>56. Merge Intervals</title>
    <link href="http://wangzt568.github.io/2020/07/19/56-Merge-Intervals/"/>
    <id>http://wangzt568.github.io/2020/07/19/56-Merge-Intervals/</id>
    <published>2020-07-19T20:25:39.000Z</published>
    <updated>2020-07-30T01:18:06.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of intervals, merge all overlapping intervals.<a id="more"></a></p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: [[1,3],[2,6],[8,10],[15,18]]Output: [[1,6],[8,10],[15,18]]Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: [[1,4],[4,5]]Output: [[1,5]]Explanation: Intervals [1,4] and [4,5] are considered overlapping.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Solution1-Sorting"><a href="#Solution1-Sorting" class="headerlink" title="Solution1(Sorting)"></a>Solution1(Sorting)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">IntervalComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntervalComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interval <span class="token operator">:</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// if the list of merged intervals is empty or if the current</span>      <span class="token comment">// interval does not overlap with the previous, simply append it.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> merged<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> interval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        merged<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// otherwise, there is overlap, so we merge the current and previous</span>      <span class="token comment">// intervals.</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        merged<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> interval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> merged<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>merged<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>Complexity Analysis</strong></p><ul><li><p>Time complexity : O*(<em>n</em>log<em>n</em>)</p><p>Other than the <code>sort</code> invocation, we do a simple linear scan of the list, so the runtime is dominated by the O(nlgn)complexity of sorting.</p></li><li><p>Space complexity : O(1)(or O*(<em>n</em>))</p><p>If we can sort <code>intervals</code> in place, we do not need more than constant additional space. Otherwise, we must allocate linear space to store a copy of <code>intervals</code> and sort that.</p></li></ul></li></ul><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><p>提取所有的 start和end到两个数组中, 分别sort,再进行比较, 结果依然正确.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> intervals<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            end<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> start<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>start<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li><p>Time Complexity: O*(<em>n</em>log<em>n</em>)</p></li><li><p>Space Complexity:O(n)</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Given a collection of intervals, merge all overlapping intervals.</summary>
    
    
    
    <category term="Leet" scheme="http://wangzt568.github.io/categories/Leet/"/>
    
    <category term="M" scheme="http://wangzt568.github.io/categories/Leet/M/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>55. Jump Game</title>
    <link href="http://wangzt568.github.io/2020/07/19/55-Jump-Game/"/>
    <id>http://wangzt568.github.io/2020/07/19/55-Jump-Game/</id>
    <published>2020-07-19T20:10:05.000Z</published>
    <updated>2020-07-30T01:17:57.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Determine if you are able to reach the last index.</p> <a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [2,3,1,1,4]Output: trueExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [3,2,1,0,4]Output: falseExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>0 &lt;= nums[i][j] &lt;= 10^5</code></li></ul><h2 id="Solution1-Greedy"><a href="#Solution1-Greedy" class="headerlink" title="Solution1(Greedy)"></a>Solution1(Greedy)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//不断更新当前位置所能跳到的最远位置</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> curMaxJump <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curMaxJump <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> curMaxJump<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>curMaxJump <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    curMaxJump <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>curMaxJump  <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li>Time Complexity: O(n).</li><li>Space Complexity: O(1).</li></ul><h2 id="Solution2-DP-amp-Backtrack"><a href="#Solution2-DP-amp-Backtrack" class="headerlink" title="Solution2(DP&amp;Backtrack)"></a>Solution2(DP&amp;Backtrack)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJumpFromPosition</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> furthestJump <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>position <span class="token operator">+</span> nums<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> nextPosition <span class="token operator">=</span> position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> nextPosition <span class="token operator">&lt;=</span> furthestJump<span class="token punctuation">;</span> nextPosition<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canJumpFromPosition</span><span class="token punctuation">(</span>nextPosition<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">canJumpFromPosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Complexity Analysis</strong><ul><li>Time complexity : O(2^n). There are 2^n (upper bound) ways of jumping from the first position to the last, where n is the length of array <code>nums</code>. For a complete proof, please refer to Appendix A.</li><li>Space complexity : O(n). Recursion requires additional memory for the stack frames.</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Given an array of non-negative integers, you are initially positioned at the first index of the array.&lt;/p&gt;
&lt;p&gt;Each element in the array represents your maximum jump length at that position.&lt;/p&gt;
&lt;p&gt;Determine if you are able to reach the last index.&lt;/p&gt;</summary>
    
    
    
    <category term="Leet" scheme="http://wangzt568.github.io/categories/Leet/"/>
    
    <category term="M" scheme="http://wangzt568.github.io/categories/Leet/M/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
    <category term="Backtrack" scheme="http://wangzt568.github.io/tags/Backtrack/"/>
    
  </entry>
  
  <entry>
    <title>54.Spiral Matrix</title>
    <link href="http://wangzt568.github.io/2020/07/19/54-Spiral-Matrix/"/>
    <id>http://wangzt568.github.io/2020/07/19/54-Spiral-Matrix/</id>
    <published>2020-07-19T19:50:39.000Z</published>
    <updated>2020-07-30T01:17:50.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.<a id="more"></a></p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]Output: [1,2,3,6,9,8,7,4,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input:[  [1, 2, 3, 4],  [5, 6, 7, 8],  [9,10,11,12]]Output: [1,2,3,4,8,12,11,10,9,5,6,7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果列表</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>         <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token class-name">C</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//定义row和column总长</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//标记每个位置是否已经加入</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//dr dc共同定义移动方向, 顺时针旋转</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> di <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定义起始位置和方向</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">R</span> <span class="token operator">*</span> <span class="token class-name">C</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入元素</span>            seen<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//加入标记</span>            <span class="token keyword">int</span> cr <span class="token operator">=</span> r <span class="token operator">+</span> dr<span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//下一candidate位置行坐标</span>            <span class="token keyword">int</span> cc <span class="token operator">=</span> c <span class="token operator">+</span> dc<span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//下一candidate位置列坐标</span>             <span class="token comment">//判断得到的candidate位置是否撞到边界,seen[cr][cc]判断该位置是否已经添加, 已经添加过的行和列会成为新的边界.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> cr <span class="token operator">&amp;&amp;</span> cr <span class="token operator">&lt;</span> <span class="token class-name">R</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> cc <span class="token operator">&amp;&amp;</span> cc <span class="token operator">&lt;</span> <span class="token class-name">C</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>seen<span class="token punctuation">[</span>cr<span class="token punctuation">]</span><span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> cr<span class="token punctuation">;</span>                 c <span class="token operator">=</span> cc<span class="token punctuation">;</span> <span class="token comment">//candidate位置有效, 可以进行添加. </span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                di <span class="token operator">=</span> <span class="token punctuation">(</span>di <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>                r <span class="token operator">+=</span> dr<span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">;</span>                c <span class="token operator">+=</span> dc<span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//candidate位置无效, 根据dr, dc顺时针转向</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li>Time Complexity: O(N), where N is the total number of elements in the input matrix. We add every element in the matrix to our final answer.</li><li>Space Complexity: O(N), the information stored in <code>seen</code> and in <code>ans</code>.</li></ul><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">Integer</span> <span class="token punctuation">></span></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> r1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r2 <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//r1代表上边,添加方向左到右;c2代表右边, 添加方向上到下; r2代表下边 自右向左;c1代表左边</span>        <span class="token comment">//自下向上.一次添加,添加完成后向内收拢一圈,直到各个边相遇.</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r1 <span class="token operator">&lt;=</span> r2 <span class="token operator">&amp;&amp;</span> c1 <span class="token operator">&lt;=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> c1<span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> c2<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//起点c1列添加r1行</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> r1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> r2<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//起点r1+1行添加c2列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r1 <span class="token operator">&lt;</span> r2 <span class="token operator">&amp;&amp;</span> c1 <span class="token operator">&lt;</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> c2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">></span> c1<span class="token punctuation">;</span> c<span class="token operator">--</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//起点c2 -1列 添加r2行</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> r2<span class="token punctuation">;</span> r <span class="token operator">></span> r1<span class="token punctuation">;</span> r<span class="token operator">--</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 起点 r2行, 添加c1列</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//向内收缩</span>            r1<span class="token operator">++</span><span class="token punctuation">;</span>            r2<span class="token operator">--</span><span class="token punctuation">;</span>            c1<span class="token operator">++</span><span class="token punctuation">;</span>            c2<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li>Time Complexity: O(N), where N is the total number of elements in the input matrix. We add every element in the matrix to our final answer.</li><li>Space Complexity:<ul><li>O(1) without considering the output array, since we don’t use any additional data structures for our computations.</li><li>O(N) if the output array is taken into account.</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Given a matrix of &lt;em&gt;m&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; elements (&lt;em&gt;m&lt;/em&gt; rows, &lt;em&gt;n&lt;/em&gt; columns), return all elements of the matrix in spiral order.</summary>
    
    
    
    <category term="Leet" scheme="http://wangzt568.github.io/categories/Leet/"/>
    
    <category term="M" scheme="http://wangzt568.github.io/categories/Leet/M/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
  </entry>
  
</feed>
