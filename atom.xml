<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZetianNotes</title>
  
  
  <link href="http://wangzt568.github.io/atom.xml" rel="self"/>
  
  <link href="http://wangzt568.github.io/"/>
  <updated>2021-02-23T21:51:21.288Z</updated>
  <id>http://wangzt568.github.io/</id>
  
  <author>
    <name>Wang,Zetian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KafkaBasic</title>
    <link href="http://wangzt568.github.io/2021/02/23/KafkaBasic/"/>
    <id>http://wangzt568.github.io/2021/02/23/KafkaBasic/</id>
    <published>2021-02-23T21:40:46.000Z</published>
    <updated>2021-02-23T21:51:21.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Topics-and-partitions"><a href="#Topics-and-partitions" class="headerlink" title="Topics and partitions"></a>Topics and partitions</h1><ul><li><code>Topics</code>: a particular stream of data<ul><li>Similar to a table in a database (without all the constraints)</li><li>You can have as many topics as you want.</li><li>A topic is identified by its name</li></ul></li><li>Topics are split in <code>partitions</code><ul><li>Each partition is ordered</li><li>Each message within a partition gets an incremental id, called offset.</li></ul></li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218111333.png)</p><ul><li>Offset only have a meaning for a specific partition.<br> E.g. offset 3 in partition doesn’t represent the same data as offset 3 in partition 1.</li><li>Order is guraranteed only within a partition (not across partitions)</li><li>Data is kept only for a limited time (default is one weeks)</li><li>Once the data is written to partition, it can’t be changed(immutability)</li><li>Data is assigned randomly to a partition unless a key is provided</li><li>You can have as many partitions per topics as you want</li></ul><h1 id="Kafka-Brokers-and-Data-Replication-Explained"><a href="#Kafka-Brokers-and-Data-Replication-Explained" class="headerlink" title="Kafka Brokers and Data Replication Explained"></a>Kafka Brokers and Data Replication Explained</h1><ul><li>A Kafka cluster is composed of multiple brokers (servers)</li><li>Each broker is identified with its ID (integer)</li><li>Each broker contains certain topic partitions</li><li>After connecting to any broker (called a bootstrap broker), you will be connected to the entire cluster.</li><li>A good number to get started is 3 brokers, but some big clusters have over 100 brokers.</li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218112118.png)</p><ul><li>Example of 2 topics (3 partitions and 2 partitions)</li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218112222.png)</p><ul><li>Data is distributed and Broker 3 doesnt have any Topic 2 data</li></ul><h2 id="Topic-replication-factor"><a href="#Topic-replication-factor" class="headerlink" title="Topic replication factor"></a>Topic replication factor</h2><ul><li>Topics should have a replication factor &gt; 1 (usually between 2 and 3)</li><li>This way if a broker is down, another broker can serve the data</li><li>Example: Topic with 2 partitions and replication factor of 2.</li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218112603.png)</p><ul><li>Example: we lost Broker 2</li><li>Result: Broker 1 and 3 can still serve the data.    </li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218112722.png)</p><h2 id="Concept-of-Leader-for-a-partition"><a href="#Concept-of-Leader-for-a-partition" class="headerlink" title="Concept of Leader for a partition"></a>Concept of Leader for a partition</h2><ul><li><strong>At any time only 1 broker can be a leader for a given partition</strong></li><li><strong>Only that leader can receive and serve data for a partition</strong></li><li>The other brokers will synchronize the data</li><li>There each partition has: one leader, and multiple ISR (in-sync replica)</li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218112954.png)</p><h1 id="Kafka-Producers"><a href="#Kafka-Producers" class="headerlink" title="Kafka Producers"></a>Kafka Producers</h1><ul><li>Producers write data to topics</li><li><strong><ins>They only have to specify the topic name and one broker to connect to, and Kafka will automatically take care of routing the data to the right brokers</ins></strong></li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218113928.png)</p><ul><li>Producers can choose to receive acknowledgement of data writes:(from fast to slow and unsafe to sage)</li><li>Acks=0:Producer won’t wait for acknowledgement (possible data loss)</li><li>Acks=1: Producer will wait for leader acknowledgement (limited data loss)</li><li>Acks=all:Leader + replicas acknowledgement (no data loss)</li></ul><h2 id="Producers-Message-keys"><a href="#Producers-Message-keys" class="headerlink" title="Producers: Message keys"></a>Producers: Message keys</h2><ul><li>Producers can choose to send a key with the message</li><li>if a key is sent, then the producer has the guarantee that all message for that key will always go to the same partition</li><li>Thiss enables to guarantee ordering for a specific key.<br>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218114353.png)</li></ul><h1 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h1><ul><li>Consumers read data from a topic</li><li>They only have to specify the topic name and one broker to connect to, and Kafka will automatically take care of pulling the data from the right brokers</li><li>Data is read in order for each partitions.</li><li>Consumer can read data in parallelism between different partitions.</li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218115623.png)</p><h2 id="Consumer-Groups-for-parallelism"><a href="#Consumer-Groups-for-parallelism" class="headerlink" title="Consumer Groups(for parallelism)"></a>Consumer Groups(for parallelism)</h2><ul><li>Consumers read data in consumer groups</li><li>Each consumer within a group reads from exclusive(different) partitions</li><li>You cannot have more consumers than partitions(otherwise some will be in active)</li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218115825.png)</p><h2 id="Consumer-Offsets"><a href="#Consumer-Offsets" class="headerlink" title="Consumer Offsets"></a>Consumer Offsets</h2><ul><li>kafka stores the offsets at which a consumer group has been reading</li><li>The offsets commit live in a Kafka topic named “__consumer_offsets”</li><li>When a consumer has processed data received some Kafka, it should be committing the offsets.</li><li>If a consumer process dies, it will be able to read back from where it left off thanks to consumer offsets.</li></ul><p>![](E:\NoteBook\Message-Broker\img\Pasted image 20210218120115.png)</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Topics-and-partitions&quot;&gt;&lt;a href=&quot;#Topics-and-partitions&quot; class=&quot;headerlink&quot; title=&quot;Topics and partitions&quot;&gt;&lt;/a&gt;Topics and partitions&lt;/</summary>
      
    
    
    
    <category term="Kafka" scheme="http://wangzt568.github.io/categories/Kafka/"/>
    
    
    <category term="MessageBroker" scheme="http://wangzt568.github.io/tags/MessageBroker/"/>
    
    <category term="Kafka" scheme="http://wangzt568.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>MultithreadingBasicTheory</title>
    <link href="http://wangzt568.github.io/2021/02/23/MultithreadingBasicTheory/"/>
    <id>http://wangzt568.github.io/2021/02/23/MultithreadingBasicTheory/</id>
    <published>2021-02-23T21:39:47.000Z</published>
    <updated>2021-02-23T21:44:54.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Multithreading"><a href="#Multithreading" class="headerlink" title="Multithreading"></a>Multithreading</h1><h2 id="Threads-a-thread-is-a-“light-weight”-process"><a href="#Threads-a-thread-is-a-“light-weight”-process" class="headerlink" title="Threads: a thread is a “light-weight” process"></a>Threads: a thread is a “light-weight” process</h2><ul><li>It is a unit of execution within a given process (a process may have several threads)</li><li>Each thread in a process shares the memory(except stack) and resources while processes don’t share memory. </li><li>Creating a new thread requires fewer resources than creating a new process.</li></ul><h2 id="Time-Slicing-Algorithm"><a href="#Time-Slicing-Algorithm" class="headerlink" title="Time-Slicing Algorithm"></a>Time-Slicing Algorithm</h2><p>Processing time for a single core is shared among processes and threads.<br>![](E:\wztblog\source\img\Pasted image 20210223163210.png)</p><h2 id="THREAD-STATES"><a href="#THREAD-STATES" class="headerlink" title="THREAD STATES"></a>THREAD STATES</h2><ol><li><code>NEW</code>: Instantiate a thread. We use <strong>start()</strong> method.</li><li><code>Runnable</code>: After we have started the thread.The thread is executing.</li><li><code>Waiting</code>:  A thread waits for other threads to finish. Use <code>wait()</code>, <code>sleep()</code> method. Can be waken up by other threads.</li><li><code>Dead</code> After the thread finished its task.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Multithreading&quot;&gt;&lt;a href=&quot;#Multithreading&quot; class=&quot;headerlink&quot; title=&quot;Multithreading&quot;&gt;&lt;/a&gt;Multithreading&lt;/h1&gt;&lt;h2 id=&quot;Threads-a-thread-</summary>
      
    
    
    
    <category term="Multithreading" scheme="http://wangzt568.github.io/categories/Multithreading/"/>
    
    
    <category term="Multithreading" scheme="http://wangzt568.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>1286.Iterator for Combination</title>
    <link href="http://wangzt568.github.io/2021/02/16/1286-Iterator-for-Combination/"/>
    <id>http://wangzt568.github.io/2021/02/16/1286-Iterator-for-Combination/</id>
    <published>2021-02-16T15:04:58.000Z</published>
    <updated>2021-02-16T15:07:51.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1286-Iterator-for-Combination"><a href="#1286-Iterator-for-Combination" class="headerlink" title="1286. Iterator for Combination"></a>1286. Iterator for Combination</h1><p>Design the <code>CombinationIterator</code> class:</p><ul><li>  <code>CombinationIterator(string characters, int combinationLength)</code> Initializes the object with a string <code>characters</code> of <strong>sorted distinct</strong> lowercase English letters and a number <code>combinationLength</code> as arguments.</li><li>  <code>next()</code> Returns the next combination of length <code>combinationLength</code> in <strong>lexicographical order</strong>.</li><li>  <code>hasNext()</code> Returns <code>true</code> if and only if there exists a next combination.</li></ul><p><strong>Example 1:</strong></p><p><strong>Input</strong><br>[“CombinationIterator”, “next”, “hasNext”, “next”, “hasNext”, “next”, “hasNext”]<br>[[“abc”, 2], [], [], [], [], [], []]<br><strong>Output</strong><br>[null, “ab”, true, “ac”, true, “bc”, false]</p><p><strong>Explanation</strong><br>CombinationIterator itr = new CombinationIterator(“abc”, 2);<br>itr.next();    // return “ab”<br>itr.hasNext(); // return True<br>itr.next();    // return “ac”<br>itr.hasNext(); // return True<br>itr.next();    // return “bc”<br>itr.hasNext(); // return False</p><p><strong>Constraints:</strong></p><ul><li>  <code>1 &lt;= combinationLength &lt;= characters.length &lt;= 15</code></li><li>  All the characters of <code>characters</code> are <strong>unique</strong>.</li><li>  At most <code>104</code> calls will be made to <code>next</code> and <code>hasNext</code>.</li><li>  It’s guaranteed that all calls of the function <code>next</code> are valid.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CombinationIterator</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> st<span class="token punctuation">;</span>    <span class="token class-name">String</span> result<span class="token punctuation">,</span> str<span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">int</span> comLength<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token class-name">CombinationIterator</span><span class="token punctuation">(</span><span class="token class-name">String</span> characters<span class="token punctuation">,</span> <span class="token keyword">int</span> combinationLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> characters<span class="token punctuation">;</span>        comLength <span class="token operator">=</span> combinationLength<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//create first permutation.</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> c <span class="token operator">:</span> characters<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">+=</span> c<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> combinationLength<span class="token punctuation">)</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">//extract all the index of the character in characters.</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> c <span class="token operator">:</span> characters<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//calculate next</span>        <span class="token class-name">String</span> currResult <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token comment">//因为是符合lexicographical order,所以每次更新permutation,组合中从末尾开始与原String从末尾开始</span><span class="token comment">//相一致的元素,必然要发生改变. 比如: ac abc.那么c必然要变化. acd, abcd, 那么cd必然要发生变化,不然无法符</span><span class="token comment">//合lexicographical order.</span><span class="token comment">//从末尾开始,移除当前组合和原str位置对应的元素.</span><span class="token comment">//比如当前组合是ac, 原str是abc, 那么就移除c.</span><span class="token comment">//当前组合变为a, 原str的index减少一,对应元素为b,</span><span class="token comment">//此时组合中末尾元素为a, 无法与str中的b对应,跳出循环</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//对应的,结果中也要移除相应的元素.</span>            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果所有元素都被移除,说明当前组合已经是lexicographical order下的最后一个.</span><span class="token comment">//比如 abcd,要求长度是3, 那么bcd为最后一种组合. 运行到此, bcd可以被上面的循环完全移除.所以st为空可以判断</span><span class="token comment">//没有next</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> currResult<span class="token punctuation">;</span>                index <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//末尾元素移除完毕后, 当前元素也必然要改变, 形成新的组合.</span><span class="token comment">//移除当前元素, 并按顺序加入当前元素的后置位元素,直到组合长度符合要求.</span>        result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> comLength<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Character</span> temp <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> currResult<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Your CombinationIterator object will be instantiated and called as such: * CombinationIterator obj = new CombinationIterator(characters, combinationLength); * String param_1 = obj.next(); * boolean param_2 = obj.hasNext(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="时间与空间复杂度:"></a>时间与空间复杂度:</h3><p>O(n)space<br>O(n)init<br>O(n)next<br>O(n)hasNext</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1286-Iterator-for-Combination&quot;&gt;&lt;a href=&quot;#1286-Iterator-for-Combination&quot; class=&quot;headerlink&quot; title=&quot;1286. Iterator for Combination&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://wangzt568.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Multi-threading-Concepts</title>
    <link href="http://wangzt568.github.io/2021/02/14/Multi-threading-Concepts/"/>
    <id>http://wangzt568.github.io/2021/02/14/Multi-threading-Concepts/</id>
    <published>2021-02-15T02:04:15.000Z</published>
    <updated>2021-02-15T03:57:47.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Semaphores"><a href="#Semaphores" class="headerlink" title="Semaphores"></a>Semaphores</h1><ul><li>Invented by Dijkstra back in 1962</li><li>semaphores are simple variables(or abstract data types) that are used for controlling access to a common resource.</li></ul><p><strong><em>It is a record of how many units of particular resource are available, we have to wait until a unit of the resource becomes available again.</em></strong></p><hr><ul><li>Counting semaphores:  allows an arbitrary resource count</li></ul><hr><ul><li>Binary semaphores:  semaphores that are restricted to the values 0 and 1</li></ul><hr><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h3><pre><code>1. semaphores tracks only how many resources are free - it does not keep track of which of the resources are free.2. the semaphore count may serve as a useful trigger for a number of different actions(web servers)3. producer-consumer problem can be solved and implemented with the help of semaphores.</code></pre><h3 id="Mutexes-Mutual-Exclusion-Objects"><a href="#Mutexes-Mutual-Exclusion-Objects" class="headerlink" title="Mutexes(Mutual Exclusion Objects)"></a>Mutexes(Mutual Exclusion Objects)</h3><ul><li>To prevent race conditions</li><li>mutex is very similar to a binary semaphore, while binary semaphore can be used as mutex, a mutex is a more specific use-case.</li><li>a Lock is designed to enforce a mutual exclusion concurrency control policy.</li></ul><h3 id="Differences-between-mutex-and-semaphore"><a href="#Differences-between-mutex-and-semaphore" class="headerlink" title="Differences between mutex and semaphore"></a>Differences between mutex and semaphore</h3><p><strong>SEMAPHORE</strong></p><ul><li>signalling mechanism, threads and process perform wait() and notify() operations to indicate whether they are acquiring or releasing the resource.</li><li>allows multiple program threads to access the finite instance of resources(not just a single resource)</li><li>the process or thread blocks itself if no resource if free till the count of semaphore become greater than 0.</li></ul><p><strong>MUTEX</strong></p><ul><li>locking mechanism, threads or processes have to acquire the lock on mutex object if it wants to acquire the resource.</li><li>mutex allows multiple program threads to access a single shared resource but one at a time.</li><li>if the lock is already acquired by another thread or process then the thread will wait until the mutex object gets unlocked.</li></ul><h2 id="SemaphoreExample"><a href="#SemaphoreExample" class="headerlink" title="SemaphoreExample"></a>SemaphoreExample</h2><blockquote><p>Only 3 threads can access the resource at one time cause there is only 3 permits in Semaphore.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Semaphore</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">DownLoader</span><span class="token punctuation">&#123;</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">downLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">downLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DownLoading data........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Multithreading</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">DownLoader</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">downLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Semaphores&quot;&gt;&lt;a href=&quot;#Semaphores&quot; class=&quot;headerlink&quot; title=&quot;Semaphores&quot;&gt;&lt;/a&gt;Semaphores&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Invented by Dijkstra back in 196</summary>
      
    
    
    
    <category term="Multi-threading" scheme="http://wangzt568.github.io/categories/Multi-threading/"/>
    
    
    <category term="Java" scheme="http://wangzt568.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Enums</title>
    <link href="http://wangzt568.github.io/2021/02/14/Enums-1/"/>
    <id>http://wangzt568.github.io/2021/02/14/Enums-1/</id>
    <published>2021-02-15T01:47:55.000Z</published>
    <updated>2021-02-15T03:57:03.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Enums"><a href="#Enums" class="headerlink" title="Enums"></a>Enums</h1><h2 id="Enums-概念"><a href="#Enums-概念" class="headerlink" title="Enums 概念"></a>Enums 概念</h2><blockquote><p>An enum type is a special data type that enables for a variable to be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it. Common examples include compass directions (values of NORTH, SOUTH, EAST, and WEST) and the days of the week.</p></blockquote><p>Because they are constants, the names of an enum type’s fields are in uppercase letters.<br>In the Java programming language, you define an enum type by using the enum keyword. For example, you would specify a days-of-the-week enum type as:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>SUNDAY<span class="token punctuation">,</span> MONDAY<span class="token punctuation">,</span> TUESDAY<span class="token punctuation">,</span> WEDNESDAY<span class="token punctuation">,</span>THURSDAY<span class="token punctuation">,</span> FRIDAY<span class="token punctuation">,</span> SATURDAY<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You should use enum types any time you need to represent a fixed set of constants. That includes natural enum types such as the planets in our solar system and data sets where you know all possible values at compile time—for example, the choices on a menu, command line flags, and so on.</p><p>Here is some code that shows you how to use the Day enum defined above:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Day</span> day<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span> day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> MONDAY<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mondays are bad."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FRIDAY<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fridays are better."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SATURDAY<span class="token operator">:</span> <span class="token keyword">case</span> SUNDAY<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Weekends are best."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Midweek days are so-so."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EnumTest</span> firstDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>MONDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        firstDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> thirdDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>WEDNESDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        thirdDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> fifthDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        fifthDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> sixthDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        sixthDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumTest</span> seventhDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumTest</span><span class="token punctuation">(</span><span class="token class-name">Day</span><span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        seventhDay<span class="token punctuation">.</span><span class="token function">tellItLikeItIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//The output is:</span>  <span class="token class-name">Mondays</span> are <span class="token class-name"><span class="token namespace">bad<span class="token punctuation">.</span></span>Midweek</span> days are so<span class="token operator">-</span><span class="token class-name"><span class="token namespace">so<span class="token punctuation">.</span></span>Fridays</span> are <span class="token class-name"><span class="token namespace">better<span class="token punctuation">.</span></span>Weekends</span> are <span class="token class-name"><span class="token namespace">best<span class="token punctuation">.</span></span>Weekends</span> are best<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java programming language enum types are much more powerful than their counterparts in other languages. The enum declaration defines a class (called an enum type). The enum class body can include methods and other fields. The compiler automatically adds some special methods when it creates an enum. For example, they have <strong>a static values method</strong> that returns an array containing all of the values of the enum in the order they are declared. This method is commonly used in combination with the for-each construct to iterate over the values of an enum type. For example, this code from the Planet class example below iterates over all the planets in the solar system.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Planet</span> p <span class="token operator">:</span> <span class="token class-name">Planet</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your weight on %s is %f%n"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">surfaceWeight</span><span class="token punctuation">(</span>mass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Note:</strong> <em>All</em> enums implicitly extend java.lang.Enum. Because a class can only extend one parent (see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html">Declaring Classes</a>), the Java language does not support multiple inheritance of state (see <a href="https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html">Multiple Inheritance of State, Implementation, and Type</a>), and therefore an enum cannot extend anything else.</p><p>In the following example, Planet is an enum type that represents the planets in the solar system. They are defined with constant mass and radius properties.</p><p>Each enum constant is declared with values for the mass and radius parameters. These values are passed to the constructor when the constant is created. Java requires that the constants be defined first, prior to any fields or methods. Also, when there are fields and methods, the list of enum constants must end with a semicolon.</p><hr><p>Note: The constructor for an enum type must be package-private or private access. It automatically creates the constants that are defined at the beginning of the enum body. You cannot invoke an enum constructor yourself.</p><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Planet</span> <span class="token punctuation">&#123;</span>     MERCURY <span class="token punctuation">(</span><span class="token number">3.303e+23</span><span class="token punctuation">,</span> <span class="token number">2.4397e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     VENUS   <span class="token punctuation">(</span><span class="token number">4.869e+24</span><span class="token punctuation">,</span> <span class="token number">6.0518e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     EARTH   <span class="token punctuation">(</span><span class="token number">5.976e+24</span><span class="token punctuation">,</span> <span class="token number">6.37814e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     MARS    <span class="token punctuation">(</span><span class="token number">6.421e+23</span><span class="token punctuation">,</span> <span class="token number">3.3972e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     JUPITER <span class="token punctuation">(</span><span class="token number">1.9e+27</span><span class="token punctuation">,</span>   <span class="token number">7.1492e7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     SATURN  <span class="token punctuation">(</span><span class="token number">5.688e+26</span><span class="token punctuation">,</span> <span class="token number">6.0268e7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     URANUS  <span class="token punctuation">(</span><span class="token number">8.686e+25</span><span class="token punctuation">,</span> <span class="token number">2.5559e7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     NEPTUNE <span class="token punctuation">(</span><span class="token number">1.024e+26</span><span class="token punctuation">,</span> <span class="token number">2.4746e7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> mass<span class="token punctuation">;</span>   <span class="token comment">// in kilograms </span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span> <span class="token comment">// in meters </span>    <span class="token class-name">Planet</span><span class="token punctuation">(</span><span class="token keyword">double</span> mass<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>mass <span class="token operator">=</span> mass<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">mass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> mass<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">radius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> radius<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token comment">// universal gravitational constant  (m3 kg-1 s-2) </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">G</span> <span class="token operator">=</span> <span class="token number">6.67300E-11</span><span class="token punctuation">;</span>     <span class="token keyword">double</span> <span class="token function">surfaceGravity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token class-name">G</span> <span class="token operator">*</span> mass <span class="token operator">/</span> <span class="token punctuation">(</span>radius <span class="token operator">*</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">double</span> <span class="token function">surfaceWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> otherMass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> otherMass <span class="token operator">*</span> <span class="token function">surfaceGravity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java Planet &lt;earth_weight>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">double</span> earthWeight <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">double</span> mass <span class="token operator">=</span> earthWeight<span class="token operator">/</span>EARTH<span class="token punctuation">.</span><span class="token function">surfaceGravity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Planet</span> p <span class="token operator">:</span> <span class="token class-name">Planet</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your weight on %s is %f%n"</span><span class="token punctuation">,</span>                              p<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">surfaceWeight</span><span class="token punctuation">(</span>mass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">If</span> you run <span class="token class-name">Planet</span><span class="token punctuation">.</span><span class="token keyword">class</span> from the command line <span class="token keyword">with</span> <span class="token namespace">an</span> argument of <span class="token number">175</span><span class="token punctuation">,</span> you get <span class="token keyword">this</span> output<span class="token operator">:</span> $ java <span class="token class-name">Planet</span> <span class="token number">175</span> <span class="token class-name">Your</span> weight on MERCURY is <span class="token number">66.107583</span> <span class="token class-name">Your</span> weight on VENUS is <span class="token number">158.374842</span> <span class="token class-name">Your</span> weight on EARTH is <span class="token number">175.000000</span> <span class="token class-name">Your</span> weight on MARS is <span class="token number">66.279007</span> <span class="token class-name">Your</span> weight on JUPITER is <span class="token number">442.847567</span> <span class="token class-name">Your</span> weight on SATURN is <span class="token number">186.552719</span> <span class="token class-name">Your</span> weight on URANUS is <span class="token number">158.397260</span> <span class="token class-name">Your</span> weight on NEPTUNE is <span class="token number">199.207413</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-使用-Enum-实现单例模式"><a href="#Java-使用-Enum-实现单例模式" class="headerlink" title="Java 使用 Enum 实现单例模式"></a>Java 使用 Enum 实现单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">&#123;</span>INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SingletonEnum</span> <span class="token punctuation">&#123;</span>INSTANCE<span class="token punctuation">;</span><span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">// 这里我们可以自定义构造函数.</span><span class="token keyword">private</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"INSTANCE now created!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start get instance!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SingletonEnum</span> singleton <span class="token operator">=</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleton<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果:</span>start get instance<span class="token operator">!</span>INSTANCE now created<span class="token operator">!</span><span class="token number">1</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的SingletonEnum的定义利用的enum是一种特殊的class.代码中的第一行INSTANCE会被编译器编译为SingletonEnum本身的一个对象.当第一次访问SingletonEnum.INSTANCE时会创建该对象,并且enum变量的创建是线程安全的.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 使用枚举的单例模式  *  * @author yzl  * @see [相关类/方法]（可选）  * @since [产品/模块版本] （可选）  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>         INSTANCE<span class="token punctuation">;</span>                  <span class="token keyword">private</span> <span class="token class-name">EnumSingleton</span> singleton<span class="token punctuation">;</span>         <span class="token comment">//JVM会保证此方法绝对只调用一次 </span>        <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Enums&quot;&gt;&lt;a href=&quot;#Enums&quot; class=&quot;headerlink&quot; title=&quot;Enums&quot;&gt;&lt;/a&gt;Enums&lt;/h1&gt;&lt;h2 id=&quot;Enums-概念&quot;&gt;&lt;a href=&quot;#Enums-概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Java" scheme="http://wangzt568.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://wangzt568.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Angular Start</title>
    <link href="http://wangzt568.github.io/2020/08/17/Angular-Start/"/>
    <id>http://wangzt568.github.io/2020/08/17/Angular-Start/</id>
    <published>2020-08-17T14:47:31.000Z</published>
    <updated>2020-08-17T16:21:07.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h1><p>To use the Angular framework, you should be familiar with the following:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">JavaScript</a></li><li><a href="https://developer.mozilla.org/docs/Learn/HTML/Introduction_to_HTML">HTML</a></li><li><a href="https://developer.mozilla.org/docs/Learn/CSS/First_steps">CSS</a></li></ul><p>Knowledge of <a href="https://www.typescriptlang.org/">TypeScript</a> is helpful, but not required.</p><p>To install Angular on your local system, you need the following:</p><ul><li><p><strong>Node.js</strong></p><p>Angular requires a <a href="https://nodejs.org/about/releases">current, active LTS, or maintenance LTS</a> version of Node.js.</p><p>For information about specific version requirements, see the <code>engines</code> key in the <a href="https://unpkg.com/@angular/cli/package.json">package.json</a> file.</p><p>For more information on installing Node.js, see <a href="http://nodejs.org/">nodejs.org</a>. If you are unsure what version of Node.js runs on your system, run <code>node -v</code> in a terminal window.</p></li></ul><ul><li><p><strong>npm package manager</strong></p><p>Angular, the Angular CLI, and Angular applications depend on <a href="https://docs.npmjs.com/getting-started/what-is-npm">npm packages</a> for many features and functions. To download and install npm packages, you need an npm package manager. This guide uses the <a href="https://docs.npmjs.com/cli/install">npm client</a> command line interface, which is installed with <code>Node.js</code> by default. To check that you have the npm client installed, run <code>npm -v</code> in a terminal window.</p></li></ul><h2 id="Install-the-Angular-CLI"><a href="#Install-the-Angular-CLI" class="headerlink" title="Install the Angular CLI"></a>Install the Angular CLI</h2><p>You use the Angular CLI to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.</p><p>To install the Angular CLI, open a terminal window and run the following command:</p><pre class="line-numbers language-none"><code class="language-none">npm install -g @angular&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Create-a-workspace-and-initial-application"><a href="#Create-a-workspace-and-initial-application" class="headerlink" title="Create a workspace and initial application"></a>Create a workspace and initial application</h2><p>You develop apps in the context of an Angular <a href="https://angular.io/guide/glossary#workspace"><strong>workspace</strong></a>.</p><p>To create a new workspace and initial starter app:</p><ol><li><p>Run the CLI command <code>ng new</code> and provide the name <code>my-app</code>, as shown here:</p><pre class="line-numbers language-none"><code class="language-none">ng new my-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>The <code>ng new</code> command prompts you for information about features to include in the initial app. Accept the defaults by pressing the Enter or Return key.</p></li></ol><p>The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes.</p><p>The CLI creates a new workspace and a simple Welcome app, ready to run.</p><p>You also have the option to use Angular’s strict mode, which can help you write better, more maintainable code. For more information, see <a href="https://angular.io/guide/strict-mode">Strict mode</a>.</p><h2 id="Run-the-application"><a href="#Run-the-application" class="headerlink" title="Run the application"></a>Run the application</h2><p>The Angular CLI includes a server, so that you can build and serve your app locally.</p><ol><li>Navigate to the workspace folder, such as <code>my-app</code>.</li><li>Run the following command:</li></ol><pre class="line-numbers language-none"><code class="language-none">cd my-app ng serve --open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The <code>ng serve</code> command launches the server, watches your files, and rebuilds the app as you make changes to those files.</p><p>The <code>--open</code> (or just <code>-o</code>) option automatically opens your browser to <code>http://localhost:4200/</code>.</p><h1 id="Angular-concepts"><a href="#Angular-concepts" class="headerlink" title="Angular concepts"></a>Angular concepts</h1><p>Angular is a platform and framework for building single-page client applications using HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your apps.</p><p>The architecture of an Angular application relies on certain fundamental concepts. The basic building blocks are <em>NgModules</em>, which provide a compilation context for <em>components</em>. NgModules collect related code into functional sets; an Angular app is defined by a set of NgModules. An app always has at least a <em>root module</em> that enables bootstrapping, and typically has many more <em>feature modules</em>.</p><ul><li>Components define <em>views</em>, which are sets of screen elements that Angular can choose among and modify according to your program logic and data.</li><li>Components use <em>services</em>, which provide specific functionality not directly related to views. Service providers can be <em>injected</em> into components as <em>dependencies</em>, making your code modular, reusable, and efficient.</li></ul><p>Modules, components and services are classes that use <em>decorators</em>. These decorators mark their type and provide metadata that tells Angular how to use them.</p><ul><li>The metadata for a component class associates it with a <em>template</em> that defines a view. A template combines ordinary HTML with Angular <em>directives</em> and <em>binding markup</em> that allow Angular to modify the HTML before rendering it for display.</li><li>The metadata for a service class provides the information Angular needs to make it available to components through <em>dependency injection (DI)</em>.</li></ul><p>An app’s components typically define many views, arranged hierarchically. Angular provides the <code>Router</code> service to help you define navigation paths among views. The router provides sophisticated in-browser navigational capabilities.</p><h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>Angular apps are modular and Angular has its own modularity system called <em>NgModules</em>. NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities. They can contain components, service providers, and other code files whose scope is defined by the containing NgModule. They can import functionality that is exported from other NgModules, and export selected functionality for use by other NgModules.</p><p>Every Angular app has at least one NgModule class, <a href="https://angular.io/guide/bootstrapping">the <em>root module</em></a>, which is conventionally named <code>AppModule</code> and resides in a file named <code>app.module.ts</code>. You launch your app by <em>bootstrapping</em> the root NgModule.</p><p>While a small application might have only one NgModule, most apps have many more <em>feature modules</em>. The <em>root</em> NgModule for an app is so named because it can include child NgModules in a hierarchy of any depth.</p><h2 id="NgModule-metadata"><a href="#NgModule-metadata" class="headerlink" title="NgModule metadata"></a>NgModule metadata</h2><p>An NgModule is defined by a class decorated with <code>@NgModule()</code>. The <code>@NgModule()</code> decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</p><ul><li><code>declarations</code>: The <a href="https://angular.io/guide/architecture-components">components</a>, <em>directives</em>, and <em>pipes</em> that belong to this NgModule.</li><li><code>exports</code>: The subset of declarations that should be visible and usable in the <em>component templates</em> of other NgModules.</li><li><code>imports</code>: Other modules whose exported classes are needed by component templates declared in <em>this</em> NgModule.</li><li><code>providers</code>: Creators of <a href="https://angular.io/guide/architecture-services">services</a> that this NgModule contributes to the global collection of services; they become accessible in all parts of the app. (You can also specify providers at the component level, which is often preferred.)</li><li><code>bootstrap</code>: The main application view, called the <em>root component</em>, which hosts all other app views. Only the <em>root NgModule</em> should set the <code>bootstrap</code> property.</li></ul><p>Here’s a simple root NgModule definition.</p><p>src/app/app.module.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NgModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BrowserModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span>      <span class="token punctuation">[</span> BrowserModule <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span>    <span class="token punctuation">[</span> Logger <span class="token punctuation">]</span><span class="token punctuation">,</span>  declarations<span class="token operator">:</span> <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span>      <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token operator">:</span>    <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AppComponent</code> is included in the <code>exports</code> list here for illustration; it isn’t actually necessary in this example. A root NgModule has no reason to <em>export</em> anything because other modules don’t need to <em>import</em> the root NgModule.</p><h2 id="NgModules-and-components"><a href="#NgModules-and-components" class="headerlink" title="NgModules and components"></a>NgModules and components</h2><p>NgModules provide a <em>compilation context</em> for their components. A root NgModule always has a root component that is created during bootstrap, but any NgModule can include any number of additional components, which can be loaded through the router or created through the template. The components that belong to an NgModule share a compilation context.</p><p><img src="https://angular.io/generated/images/guide/architecture/compilation-context.png" alt="Component compilation context" loading="lazy"></p><p>A component and its template together define a <em>view</em>. A component can contain a <em>view hierarchy</em>, which allows you to define arbitrarily complex areas of the screen that can be created, modified, and destroyed as a unit. A view hierarchy can mix views defined in components that belong to different NgModules. This is often the case, especially for UI libraries.</p><p><img src="https://angular.io/generated/images/guide/architecture/view-hierarchy.png" alt="View hierarchy" loading="lazy"></p><p>When you create a component, it’s associated directly with a single view, called the <em>host view</em>. The host view can be the root of a view hierarchy, which can contain <em>embedded views</em>, which are in turn the host views of other components. Those components can be in the same NgModule, or can be imported from other NgModules. Views in the tree can be nested to any depth.</p><p><strong>Note:</strong> The hierarchical structure of views is a key factor in the way Angular detects and responds to changes in the DOM and app data.</p><h2 id="NgModules-and-JavaScript-modules"><a href="#NgModules-and-JavaScript-modules" class="headerlink" title="NgModules and JavaScript modules"></a>NgModules and JavaScript modules</h2><p>The NgModule system is different from and unrelated to the JavaScript (ES2015) module system for managing collections of JavaScript objects. These are <em>complementary</em> module systems that you can use together to write your apps.</p><p>In JavaScript each <em>file</em> is a module and all objects defined in the file belong to that module. The module declares some objects to be public by marking them with the <code>export</code> key word. Other JavaScript modules use <em>import statements</em> to access public objects from other modules.</p><pre class="line-numbers language-none"><code class="language-none">import &#123; NgModule &#125; from &#39;@angular&#x2F;core&#39;; import &#123; AppComponent &#125; from &#39;.&#x2F;app.component&#39;;export class AppModule &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://exploringjs.com/es6/ch_modules.html">Learn more about the JavaScript module system on the web.</a></p><h2 id="Angular-libraries"><a href="#Angular-libraries" class="headerlink" title="Angular libraries"></a>Angular libraries</h2><p><img src="https://angular.io/generated/images/guide/architecture/library-module.png" alt="Component" loading="lazy"></p><p>Angular loads as a collection of JavaScript modules. You can think of them as library modules. Each Angular library name begins with the <code>@angular</code> prefix. Install them with the node package manager <code>npm</code> and import parts of them with JavaScript <code>import</code> statements.</p><p>For example, import Angular’s <code>Component</code> decorator from the <code>@angular/core</code> library like this.</p><pre class="line-numbers language-none"><code class="language-none">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>You also import NgModules from Angular <em>libraries</em> using JavaScript import statements. For example, the following code imports the <code>BrowserModule</code> NgModule from the <code>platform-browser</code> library.</p><pre class="line-numbers language-none"><code class="language-none">import &#123; BrowserModule &#125; from &#39;@angular&#x2F;platform-browser&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>In the example of the simple root module above, the application module needs material from within <code>BrowserModule</code>. To access that material, add it to the <code>@NgModule</code> metadata <code>imports</code> like this.</p><pre class="line-numbers language-none"><code class="language-none">imports:      [ BrowserModule ],<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>In this way you’re using the Angular and JavaScript module systems <em>together</em>. Although it’s easy to confuse the two systems, which share the common vocabulary of “imports” and “exports”, you will become familiar with the different contexts in which they are used.</p><p>Learn more from the <a href="https://angular.io/guide/ngmodules">NgModules</a> guide.</p><h1 id="Components-and-templates"><a href="#Components-and-templates" class="headerlink" title="Components and templates"></a>Components and templates</h1><p>A <em>component</em> controls a patch of screen called a <a href="https://angular.io/guide/glossary#view"><em>view</em></a>. For example, individual components define and control each of the following views from the <a href="https://angular.io/tutorial">Tour of Heroes tutorial</a>:</p><ul><li>The app root with the navigation links.</li><li>The list of heroes.</li><li>The hero editor.</li></ul><p>You define a component’s application logic—what it does to support the view—inside a class. The class interacts with the view through an API of properties and methods.</p><p>For example, <code>HeroListComponent</code> has a <code>heroes</code> property that holds an array of heroes. Its <code>selectHero()</code> method sets a <code>selectedHero</code> property when the user clicks to choose a hero from that list. The component acquires the heroes from a service, which is a TypeScript <a href="http://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties">parameter property</a> on the constructor. The service is provided to the component through the dependency injection system.</p><p>src/app/hero-list.component.ts (class)`</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">&#123;</span>  heroes<span class="token operator">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  selectedHero<span class="token operator">:</span> Hero<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> service<span class="token operator">:</span> HeroService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heroes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">selectHero</span><span class="token punctuation">(</span>hero<span class="token operator">:</span> Hero<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedHero <span class="token operator">=</span> hero<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Angular creates, updates, and destroys components as the user moves through the application. Your app can take action at each moment in this lifecycle through optional <a href="https://angular.io/guide/lifecycle-hooks">lifecycle hooks</a>, like <code>ngOnInit()</code>.</p><h2 id="Component-metadata"><a href="#Component-metadata" class="headerlink" title="Component metadata"></a>Component metadata</h2><p><img src="https://angular.io/generated/images/guide/architecture/metadata.png" alt="Metadata" loading="lazy"></p><p>The <code>@Component</code> decorator identifies the class immediately below it as a component class, and specifies its metadata. In the example code below, you can see that <code>HeroListComponent</code> is just a class, with no special Angular notation or syntax at all. It’s not a component until you mark it as one with the <code>@Component</code> decorator.</p><p>The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view. In particular, it associates a <em>template</em> with the component, either directly with inline code, or by reference. Together, the component and its template describe a <em>view</em>.</p><p>In addition to containing or pointing to the template, the <code>@Component</code> metadata configures, for example, how the component can be referenced in HTML and what services it requires.</p><p>Here’s an example of basic metadata for <code>HeroListComponent</code>.</p><p>src/app/hero-list.component.ts (metadata)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  selector<span class="token operator">:</span>    <span class="token string">'app-hero-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token operator">:</span> <span class="token string">'./hero-list.component.html'</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span>  <span class="token punctuation">[</span> HeroService <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">&#123;</span><span class="token comment">/* . . . */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This example shows some of the most useful <code>@Component</code> configuration options:</p><ul><li><code>selector</code>: A CSS selector that tells Angular to create and insert an instance of this component wherever it finds the corresponding tag in template HTML. For example, if an app’s HTML contains <code>&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</code>, then Angular inserts an instance of the <code>HeroListComponent</code> view between those tags.</li><li><code>templateUrl</code>: The module-relative address of this component’s HTML template. Alternatively, you can provide the HTML template inline, as the value of the <code>template</code> property. This template defines the component’s <em>host view</em>.</li><li><code>providers</code>: An array of <a href="https://angular.io/guide/glossary#provider">providers</a> for services that the component requires. In the example, this tells Angular how to provide the <code>HeroService</code> instance that the component’s constructor uses to get the list of heroes to display.</li></ul><h2 id="Templates-and-views"><a href="#Templates-and-views" class="headerlink" title="Templates and views"></a>Templates and views</h2><p><img src="https://angular.io/generated/images/guide/architecture/template.png" alt="Template" loading="lazy"></p><p>You define a component’s view with its companion template. A template is a form of HTML that tells Angular how to render the component.</p><p>Views are typically arranged hierarchically, allowing you to modify or show and hide entire UI sections or pages as a unit. The template immediately associated with a component defines that component’s <em>host view</em>. The component can also define a <em>view hierarchy</em>, which contains <em>embedded views</em>, hosted by other components.</p><p><img src="https://angular.io/generated/images/guide/architecture/component-tree.png" alt="Component tree" loading="lazy"></p><p>A view hierarchy can include views from components in the same NgModule, but it also can (and often does) include views from components that are defined in different NgModules.</p><h2 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h2><p>A template looks like regular HTML, except that it also contains Angular <a href="https://angular.io/guide/template-syntax">template syntax</a>, which alters the HTML based on your app’s logic and the state of app and DOM data. Your template can use <em>data binding</em> to coordinate the app and DOM data, <em>pipes</em> to transform data before it is displayed, and <em>directives</em> to apply app logic to what gets displayed.</p><p>For example, here is a template for the Tutorial’s <code>HeroListComponent</code>.</p><p>src/app/hero-list.component.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hero List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>Pick a hero from the list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectHero(hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;hero.name&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span> <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This template uses typical HTML elements like <code>&lt;h2&gt;</code> and <code>&lt;p&gt;</code>, and also includes Angular template-syntax elements, <code>*ngFor</code>, <code>&#123;&#123;hero.name&#125;&#125;</code>, <code>(click)</code>, <code>[hero]</code>, and <code>&lt;app-hero-detail&gt;</code>. The template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</p><ul><li>The <code>*ngFor</code> directive tells Angular to iterate over a list.</li><li><code>&#123;&#123;hero.name&#125;&#125;</code>, <code>(click)</code>, and <code>[hero]</code> bind program data to and from the DOM, responding to user input. See more about <a href="https://angular.io/guide/architecture-components#data-binding">data binding</a> below.</li><li>The <code>&lt;app-hero-detail&gt;</code> tag in the example is an element that represents a new component, <code>HeroDetailComponent</code>. <code>HeroDetailComponent</code> (code not shown) defines the hero-detail child view of <code>HeroListComponent</code>. Notice how custom components like this mix seamlessly with native HTML in the same layouts.</li></ul><h3 id="Data-binding"><a href="#Data-binding" class="headerlink" title="Data binding"></a>Data binding</h3><p>Without a framework, you would be responsible for pushing data values into the HTML controls and turning user responses into actions and value updates. Writing such push and pull logic by hand is tedious, error-prone, and a nightmare to read, as any experienced front-end JavaScript programmer can attest.</p><p>Angular supports <em>two-way data binding</em>, a mechanism for coordinating the parts of a template with the parts of a component. Add binding markup to the template HTML to tell Angular how to connect both sides.</p><p>The following diagram shows the four forms of data binding markup. Each form has a direction: to the DOM, from the DOM, or both.</p><p><img src="https://angular.io/generated/images/guide/architecture/databinding.png" alt="Data Binding" loading="lazy"></p><p>This example from the <code>HeroListComponent</code> template uses three of these forms.</p><p>src/app/hero-list.component.html (binding)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123;hero.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectHero(hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>The <code>&#123;&#123;hero.name&#125;&#125;</code> <a href="https://angular.io/guide/displaying-data#interpolation"><em>interpolation</em></a> displays the component’s <code>hero.name</code> property value within the <code>&lt;li&gt;</code> element.</li><li>The <code>[hero]</code> <a href="https://angular.io/guide/property-binding"><em>property binding</em></a> passes the value of <code>selectedHero</code> from the parent <code>HeroListComponent</code> to the <code>hero</code> property of the child <code>HeroDetailComponent</code>.</li><li>The <code>(click)</code> <a href="https://angular.io/guide/user-input#binding-to-user-input-events"><em>event binding</em></a> calls the component’s <code>selectHero</code> method when the user clicks a hero’s name.</li></ul><p>Two-way data binding (used mainly in <a href="https://angular.io/guide/forms">template-driven forms</a>) combines property and event binding in a single notation. Here’s an example from the <code>HeroDetailComponent</code> template that uses two-way data binding with the <code>ngModel</code> directive.</p><p>src/app/hero-detail.component.html (ngModel) &lt;input [(ngModel)]=”hero.name”&gt;`</p><p>In two-way binding, a data property value flows to the input box from the component as with property binding. The user’s changes also flow back to the component, resetting the property to the latest value, as with event binding.</p><p>Angular processes <em>all</em> data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components.</p><p><img src="https://angular.io/generated/images/guide/architecture/component-databinding.png" alt="Data Binding" loading="lazy"></p><p>Data binding plays an important role in communication between a template and its component, and is also important for communication between parent and child components.</p><p><img src="https://angular.io/generated/images/guide/architecture/parent-child-binding.png" alt="Parent/Child binding" loading="lazy"></p><h3 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h3><p>Angular pipes let you declare display-value transformations in your template HTML. A class with the <code>@Pipe</code> decorator defines a function that transforms input values to output values for display in a view.</p><p>Angular defines various pipes, such as the <a href="https://angular.io/api/common/DatePipe">date</a> pipe and <a href="https://angular.io/api/common/CurrencyPipe">currency</a> pipe; for a complete list, see the <a href="https://angular.io/api?type=pipe">Pipes API list</a>. You can also define new pipes.</p><p>To specify a value transformation in an HTML template, use the <a href="https://angular.io/guide/template-expression-operators#pipe">pipe operator (|)</a>.</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#123;interpolated_value | pipe_name&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>You can chain pipes, sending the output of one pipe function to be transformed by another pipe function. A pipe can also take arguments that control how it performs its transformation. For example, you can pass the desired format to the <code>date</code> pipe.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Default format: output 'Jun 15, 2015'--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Today is &#123;&#123;today | date&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- fullDate format: output 'Monday, June 15, 2015'--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The date is &#123;&#123;today | date:'fullDate'&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- shortTime format: output '9:43 AM'--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The time is &#123;&#123;today | date:'shortTime'&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h3><p><img src="https://angular.io/generated/images/guide/architecture/directive.png" alt="Directives" loading="lazy"></p><p>Angular templates are <em>dynamic</em>. When Angular renders them, it transforms the DOM according to the instructions given by <em>directives</em>. A directive is a class with a <code>@Directive()</code> decorator.</p><p>A component is technically a directive. However, components are so distinctive and central to Angular applications that Angular defines the <code>@Component()</code> decorator, which extends the <code>@Directive()</code> decorator with template-oriented features.</p><p>In addition to components, there are two other kinds of directives: <em>structural</em> and <em>attribute</em>. Angular defines a number of directives of both kinds, and you can define your own using the <code>@Directive()</code> decorator.</p><p>Just as for components, the metadata for a directive associates the decorated class with a <code>selector</code> element that you use to insert it into HTML. In templates, directives typically appear within an element tag as attributes, either by name or as the target of an assignment or a binding.</p><h4 id="Structural-directives"><a href="#Structural-directives" class="headerlink" title="Structural directives"></a>Structural directives</h4><p><em>Structural directives</em> alter layout by adding, removing, and replacing elements in the DOM. The example template uses two built-in structural directives to add application logic to how the view is rendered.</p><p>src/app/hero-list.component.html (structural)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><a href="https://angular.io/guide/displaying-data#ngFor"><code>*ngFor</code></a> is an iterative; it tells Angular to stamp out one <code>&lt;li&gt;</code> per hero in the <code>heroes</code> list.</li><li><a href="https://angular.io/guide/displaying-data#ngIf"><code>*ngIf</code></a> is a conditional; it includes the <code>HeroDetail</code> component only if a selected hero exists.</li></ul><h4 id="Attribute-directives"><a href="#Attribute-directives" class="headerlink" title="Attribute directives"></a>Attribute directives</h4><p><em>Attribute directives</em> alter the appearance or behavior of an existing element. In templates they look like regular HTML attributes, hence the name.</p><p>The <code>ngModel</code> directive, which implements two-way data binding, is an example of an attribute directive. <code>ngModel</code> modifies the behavior of an existing element (typically <code>&lt;input&gt;</code>) by setting its display value property and responding to change events.</p><p>src/app/hero-detail.component.html (ngModel)   &lt;input [(ngModel)]=”hero.name”&gt;`</p><p>Angular has more pre-defined directives that either alter the layout structure (for example, <a href="https://angular.io/guide/built-in-directives#ngSwitch">ngSwitch</a>) or modify aspects of DOM elements and components (for example, <a href="https://angular.io/guide/built-in-directives#ngStyle">ngStyle</a> and <a href="https://angular.io/guide/built-in-directives#ngClass">ngClass</a>).</p><p>Learn more in the <a href="https://angular.io/guide/attribute-directives">Attribute Directives</a> and <a href="https://angular.io/guide/structural-directives">Structural Directives</a> guides.</p><h1 id="Services-and-dependency-injection"><a href="#Services-and-dependency-injection" class="headerlink" title="Services and dependency injection"></a>Services and dependency injection</h1><p><em>Service</em> is a broad category encompassing any value, function, or feature that an app needs. A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.</p><p>Angular distinguishes components from services to increase modularity and reusability. By separating a component’s view-related functionality from other kinds of processing, you can make your component classes lean and efficient.</p><p>Ideally, a component’s job is to enable the user experience and nothing more. A component should present properties and methods for data binding, in order to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a <em>model</em>).</p><p>A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an <em>injectable service class</em>, you make those tasks available to any component. You can also make your app more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</p><p>Angular doesn’t <em>enforce</em> these principles. Angular does help you <em>follow</em> these principles by making it easy to factor your application logic into services and make those services available to components through <em>dependency injection</em>.</p><h2 id="Service-examples"><a href="#Service-examples" class="headerlink" title="Service examples"></a>Service examples</h2><p>Here’s an example of a service class that logs to the browser console.</p><p>src/app/logger.service.ts (class)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">&#123;</span>  <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Services can depend on other services. For example, here’s a <code>HeroService</code> that depends on the <code>Logger</code> service, and also uses <code>BackendService</code> to get heroes. That service in turn might depend on the <code>HttpClient</code> service to fetch heroes asynchronously from a server.</p><p>src/app/hero.service.ts (class)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> heroes<span class="token operator">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> backend<span class="token operator">:</span> BackendService<span class="token punctuation">,</span>    <span class="token keyword">private</span> logger<span class="token operator">:</span> Logger<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  <span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>Hero<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>heroes<span class="token operator">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Fetched </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>heroes<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> heroes.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fill cache</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dependency-injection-DI"><a href="#Dependency-injection-DI" class="headerlink" title="Dependency injection (DI)"></a>Dependency injection (DI)</h2><p><img src="https://angular.io/generated/images/guide/architecture/dependency-injection.png" alt="Service" loading="lazy"></p><p>DI is wired into the Angular framework and used everywhere to provide new components with the services or other things they need. Components consume services; that is, you can <em>inject</em> a service into a component, giving the component access to that service class.</p><p>To define a class as a service in Angular, use the <code>@Injectable()</code> decorator to provide the metadata that allows Angular to inject it into a component as a <em>dependency</em>. Similarly, use the <code>@Injectable()</code> decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) <em>has</em> a dependency.</p><ul><li>The <em>injector</em> is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don’t have to create injectors.</li><li>An injector creates dependencies, and maintains a <em>container</em> of dependency instances that it reuses if possible.</li><li>A <em>provider</em> is an object that tells an injector how to obtain or create a dependency.</li></ul><p>For any dependency that you need in your app, you must register a provider with the app’s injector, so that the injector can use the provider to create new instances. For a service, the provider is typically the service class itself.</p><p>A dependency doesn’t have to be a service—it could be a function, for example, or a value.</p><p>When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types. For example, the constructor of <code>HeroListComponent</code> needs <code>HeroService</code>.</p><p>src/app/hero-list.component.ts (constructor) </p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> service<span class="token operator">:</span> HeroService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn’t yet exist, the injector makes one using the registered provider, and adds it to the injector before returning the service to Angular.</p><p>When all requested services have been resolved and returned, Angular can call the component’s constructor with those services as arguments.</p><p>The process of <code>HeroService</code> injection looks something like this.</p><p><img src="https://angular.io/generated/images/guide/architecture/injector-injects.png" alt="Service" loading="lazy"></p><h3 id="Providing-services"><a href="#Providing-services" class="headerlink" title="Providing services"></a>Providing services</h3><p>You must register at least one <em>provider</em> of any service you are going to use. The provider can be part of the service’s own metadata, making that service available everywhere, or you can register providers with specific modules or components. You register providers in the metadata of the service (in the <code>@Injectable()</code> decorator), or in the <code>@NgModule()</code> or <code>@Component()</code> metadata</p><ul><li><p>By default, the Angular CLI command <a href="https://angular.io/cli/generate"><code>ng generate service</code></a> registers a provider with the root injector for your service by including provider metadata in the <code>@Injectable()</code> decorator. The tutorial uses this method to register the provider of HeroService class definition.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> providedIn<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code> and injects it into any class that asks for it. Registering the provider in the <code>@Injectable()</code> metadata also allows Angular to optimize an app by removing the service from the compiled app if it isn’t used.</p></li><li><p>When you register a provider with a <a href="https://angular.io/guide/architecture-modules">specific NgModule</a>, the same instance of a service is available to all components in that NgModule. To register at this level, use the <code>providers</code> property of the <code>@NgModule()</code> decorator,</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>  BackendService<span class="token punctuation">,</span>  Logger <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>When you register a provider at the component level, you get a new instance of the service with each new instance of that component. At the component level, register a service provider in the <code>providers</code> property of the <code>@Component()</code> metadata.</p><p>src/app/hero-list.component.ts (component providers)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  selector<span class="token operator">:</span>    <span class="token string">'app-hero-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token operator">:</span> <span class="token string">'./hero-list.component.html'</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span>  <span class="token punctuation">[</span> HeroService <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3></li></ul><p>The Angular <code>Router</code> NgModule provides a service that lets you define a navigation path among the different application states and view hierarchies in your app. It is modeled on the familiar browser navigation conventions:</p><ul><li>Enter a URL in the address bar and the browser navigates to a corresponding page.</li><li>Click links on the page and the browser navigates to a new page.</li><li>Click the browser’s back and forward buttons and the browser navigates backward and forward through the history of pages you’ve seen.</li></ul><p>The router maps URL-like paths to views instead of pages. When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser’s behavior, and shows or hides view hierarchies.</p><p>If the router determines that the current application state requires particular functionality, and the module that defines it hasn’t been loaded, the router can <em>lazy-load</em> the module on demand.</p><p>The router interprets a link URL according to your app’s view navigation rules and data state. You can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source. The router logs activity in the browser’s history, so the back and forward buttons work as well.</p><p>To define navigation rules, you associate <em>navigation paths</em> with your components. A path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data. You can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;&lt;p&gt;To use the Angular framewo</summary>
      
    
    
    
    
    <category term="Angular" scheme="http://wangzt568.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://wangzt568.github.io/2020/08/17/TypeScript/"/>
    <id>http://wangzt568.github.io/2020/08/17/TypeScript/</id>
    <published>2020-08-17T14:42:28.000Z</published>
    <updated>2020-08-17T14:45:12.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TypeScript-for-the-New-Programmer"><a href="#TypeScript-for-the-New-Programmer" class="headerlink" title="TypeScript for the New Programmer"></a>TypeScript for the New Programmer</h2><p>Congratulations on choosing TypeScript as one of your first languages — you’re already making good decisions!</p><p>You’ve probably already heard that TypeScript is a “flavor” or “variant” of JavaScript. The relationship between TypeScript (TS) and JavaScript (JS) is rather unique among modern programming languages, so learning more about this relationship will help you understand how TypeScript adds to JavaScript.<a id="more"></a></p><h2 id="What-is-JavaScript-A-Brief-History"><a href="#What-is-JavaScript-A-Brief-History" class="headerlink" title="What is JavaScript? A Brief History"></a>What is JavaScript? A Brief History</h2><p>JavaScript (also known as ECMAScript) started its life as a simple scripting language for browsers. At the time it was invented, it was expected to be used for short snippets of code embedded in a web page — writing more than a few dozen lines of code would have been somewhat unusual. Due to this, early web browsers executed such code pretty slowly. Over time, though, JS became more and more popular, and web developers started using it to create interactive experiences.</p><p>Web browser developers responded to this increased JS usage by optimizing their execution engines (dynamic compilation) and extending what could be done with it (adding APIs), which in turn made web developers use it even more. On modern websites, your browser is frequently running applications that span hundreds of thousands of lines of code. This is long and gradual growth of “the web”, starting as a simple network of static pages, and evolving into a platform for rich <em>applications</em> of all kinds.</p><p>More than this, JS has become popular enough to be used outside the context of browsers, such as implementing JS servers using node.js. The “run anywhere” nature of JS makes it an attractive choice for cross-platform development. There are many developers these days that use <em>only</em> JavaScript to program their entire stack!</p><p>To summarize, we have a language that was designed for quick uses, and then grew to a full-fledged tool to write applications with millions of lines. Every language has its own <em>quirks</em> — oddities and surprises, and JavaScript’s humble beginning makes it have <em>many</em> of these. Some examples:</p><ul><li><p>JavaScript’s equality operator (<code>==</code>) <em>coerces</em> its arguments, leading to unexpected behavior:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// It is! But why??</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// True for *any* value of x!</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JavaScript also allows accessing properties which aren’t present:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> width<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Why is this NaN? Spelling is hard!</span><span class="token keyword">const</span> area <span class="token operator">=</span> obj<span class="token punctuation">.</span>width <span class="token operator">*</span> obj<span class="token punctuation">.</span>heigth<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Most programming languages would throw an error when these sorts of errors occur, some would do so during compilation — before any code is running. When writing small programs, such quirks are annoying but manageable; when writing applications with hundreds or thousands of lines of code, these constant surprises are a serious problem.</p></li></ul><h2 id="TypeScript-A-Static-Type-Checker"><a href="#TypeScript-A-Static-Type-Checker" class="headerlink" title="TypeScript: A Static Type Checker"></a>TypeScript: A Static Type Checker</h2><p>We said earlier that some languages wouldn’t allow those buggy programs to run at all. Detecting errors in code without running it is referred to as <em>static checking</em>. Determining what’s an error and what’s not based on the kinds of values being operated on is known as static <em>type</em> checking.</p><p>TypeScript checks a program for errors before execution, and does so based on the <em>kinds of values</em>, it’s a <em>static type checker</em>. For example, the last example above has an error because of the <em>type</em> of <code>obj</code>. Here’s the error TypeScript found:</p><pre class="line-numbers language-none"><code class="language-none">const obj &#x3D; &#123; width: 10, height: 15 &#125;;const area &#x3D; obj.width * obj.heigth;Property &#39;heigth&#39; does not exist on type &#39;&#123; width: number; height: number; &#125;&#39;. Did you mean &#39;height&#39;?Property &#39;heigth&#39; does not exist on type &#39;&#123; width: number; height: number; &#125;&#39;. Did you mean &#39;height&#39;?Try<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="A-Typed-Superset-of-JavaScript"><a href="#A-Typed-Superset-of-JavaScript" class="headerlink" title="A Typed Superset of JavaScript"></a>A Typed Superset of JavaScript</h3><p>How does TypeScript relate to JavaScript, though?</p><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p>TypeScript is a language that is a <em>superset</em> of JavaScript: JS syntax is therefore legal TS. Syntax refers to the way we write text to form a program. For example, this code has a <em>syntax</em> error because it’s missing a <code>)</code>:</p><pre class="line-numbers language-none"><code class="language-none">let a &#x3D; (4&#39;)&#39; expected.&#39;)&#39; expected.Try<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>TypeScript doesn’t consider any JavaScript code to be an error because of its syntax. This means you can take any working JavaScript code and put it in a TypeScript file without worrying about exactly how it is written.</p><h4 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h4><p>However, TypeScript is a <em>typed</em> superset, meaning that it adds rules about how different kinds of values can be used. The earlier error about <code>obj.heigth</code> was not a <em>syntax</em> error: it is an error of using some kind of value (a <em>type</em>) in an incorrect way.</p><p>As another example, this is JavaScript code that you can run in your browser, and it <em>will</em> print a value:</p><pre class="line-numbers language-none"><code class="language-none">console.log(4 &#x2F; []);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This syntactically-legal program prints <code>Infinity</code>. TypeScript, though, considers division of number by an array to be a nonsensical operation, and will issue an error:</p><pre class="line-numbers language-none"><code class="language-none">console.log(4 &#x2F; []);The right-hand side of an arithmetic operation must be of type &#39;any&#39;, &#39;number&#39;, &#39;bigint&#39; or an enum type.The right-hand side of an arithmetic operation must be of type &#39;any&#39;, &#39;number&#39;, &#39;bigint&#39; or an enum type.Try<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>It’s possible you really <em>did</em> intend to divide a number by an array, perhaps just to see what happens, but most of the time, though, this is a programming mistake. TypeScript’s type checker is designed to allow correct programs through while still catching as many common errors as possible. (Later, we’ll learn about settings you can use to configure how strictly TypeScript checks your code.)</p><p>If you move some code from a JavaScript file to a TypeScript file, you might see <em>type errors</em> depending on how the code is written. These may be legitimate problems with the code, or TypeScript being overly conservative. Throughout this guide we’ll demonstrate how to add various TypeScript syntax to eliminate such errors.</p><h4 id="Runtime-Behavior"><a href="#Runtime-Behavior" class="headerlink" title="Runtime Behavior"></a>Runtime Behavior</h4><p>TypeScript is also a programming language that preserves the <em>runtime behavior</em> of JavaScript. For example, dividing by zero in JavaScript produces <code>Infinity</code> instead of throwing a runtime exception. As a principle, TypeScript <strong>never</strong> changes the runtime behavior of JavaScript code.</p><p>This means that if you move code from JavaScript to TypeScript, it is <strong>guaranteed</strong> to run the same way, even if TypeScript thinks that the code has type errors.</p><p>Keeping the same runtime behavior as JavaScript is a foundational promise of TypeScript because it means you can easily transition between the two languages without worrying about subtle differences that might make your program stop working.</p><h4 id="Erased-Types"><a href="#Erased-Types" class="headerlink" title="Erased Types"></a>Erased Types</h4><p>Roughly speaking, once TypeScript’s compiler is done with checking your code, it <em>erases</em> the types to produce the resulting “compiled” code. This means that once your code is compiled, the resulting plain JS code has no type information.</p><p>This also means that TypeScript never changes the <em>behavior</em> of your program based on the types it inferred. The bottom line is that while you might see type errors during compilation, the type system itself has no bearing on how your program works when it runs.</p><p>Finally, TypeScript doesn’t provide any additional runtime libraries. Your programs will use the same standard library (or external libraries) as JavaScript programs, so there’s no additional TypeScript-specific framework to learn.</p><h2 id="Learning-JavaScript-and-TypeScript"><a href="#Learning-JavaScript-and-TypeScript" class="headerlink" title="Learning JavaScript and TypeScript"></a>Learning JavaScript and TypeScript</h2><p>We frequently see the question “Should I learn JavaScript or TypeScript?“.</p><p>The answer is that you can’t learn TypeScript without learning JavaScript! TypeScript shares syntax and runtime behavior with JavaScript, so anything you learn about JavaScript is helping you learn TypeScript at the same time.</p><p>There are many, many resources available for programmers to learn JavaScript; you should <em>not</em> ignore these resources if you’re writing TypeScript. For example, there about 20 times more StackOverflow questions tagged <code>javascript</code> than <code>typescript</code>, but <em>all</em> of the <code>javascript</code> questions also apply to TypeScript.</p><p>If you find yourself searching for something like “how to sort a list in TypeScript”, remember: <strong>TypeScript is JavaScript’s runtime with a compile-time type checker</strong>. The way you sort a list in TypeScript is the same way you do so in JavaScript. If you find a resource that uses TypeScript directly, that’s great too, but don’t limit yourself to thinking you need TypeScript-specific answers for everyday questions about how to accomplish runtime tasks.</p><hr><p>From here, we’d recommend learning some of the JavaScript fundamentals (the <a href="https://developer.mozilla.org/docs/Web/JavaScript/Guide">JavaScript guide at the Mozilla Web Docs</a> is a good starting point.)</p><p>Once you’re feeling comfortable, you can come back to read <a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html">TypeScript for JavaScript Programmers</a>, then start on <a href="https://www.typescriptlang.org/docs/handbook/intro.html">the handbook</a> or explore the <a href="https://www.typescriptlang.org/play#show-examples">Playground examples</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TypeScript-for-the-New-Programmer&quot;&gt;&lt;a href=&quot;#TypeScript-for-the-New-Programmer&quot; class=&quot;headerlink&quot; title=&quot;TypeScript for the New Programmer&quot;&gt;&lt;/a&gt;TypeScript for the New Programmer&lt;/h2&gt;&lt;p&gt;Congratulations on choosing TypeScript as one of your first languages — you’re already making good decisions!&lt;/p&gt;
&lt;p&gt;You’ve probably already heard that TypeScript is a “flavor” or “variant” of JavaScript. The relationship between TypeScript (TS) and JavaScript (JS) is rather unique among modern programming languages, so learning more about this relationship will help you understand how TypeScript adds to JavaScript.</summary>
    
    
    
    
    <category term="TypeScript" scheme="http://wangzt568.github.io/tags/TypeScript/"/>
    
    <category term="Frontend" scheme="http://wangzt568.github.io/tags/Frontend/"/>
    
  </entry>
  
</feed>
